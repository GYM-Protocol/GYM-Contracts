{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x4ed7c70F96B99c776995fB64377f0d4aB3B0e1C1",
    "txHash": "0x4c46a7f0a987479cc23c3a0daac6624bacb7f474f24cc8306c3d3e4596840148",
    "deployTransaction": {
      "hash": "0x4c46a7f0a987479cc23c3a0daac6624bacb7f474f24cc8306c3d3e4596840148",
      "type": 2,
      "accessList": [],
      "blockHash": "0x2ab4f9f18a22dcc2da4b3e3cf49b64288117c5d73a2f8afc5c54e917060048ee",
      "blockNumber": 24,
      "transactionIndex": 0,
      "confirmations": 1,
      "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x3ec38a9d"
      },
      "maxPriorityFeePerGas": {
        "type": "BigNumber",
        "hex": "0x3b9aca00"
      },
      "maxFeePerGas": {
        "type": "BigNumber",
        "hex": "0x41ec4b3a"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x0762b4"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 22,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0x941b0ab4bcf1144c29964a0cd5aa49f37a43ee1c427b90d9021ade26514a7718",
      "s": "0x520515df9d513565b38d3999cfbf901a7270f6a88e4a3841fe06f73c79186633",
      "v": 1,
      "creates": "0x4ed7c70F96B99c776995fB64377f0d4aB3B0e1C1",
      "chainId": 31337
    }
  },
  "proxies": [
    {
      "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
      "txHash": "0x7439929b3b7aedf6bcfca7ba30b19080956822079cfb24e850c6758d324d3901",
      "kind": "transparent"
    },
    {
      "address": "0x322813Fd9A801c5507c9de605d63CEA4f2CE6c44",
      "txHash": "0xe6ed90c9a43f55537ba34b6f7a916466b81f8b065ec770ca9720db8500807815",
      "kind": "transparent"
    }
  ],
  "impls": {
    "8022bfdf27357f2c838f1c83935b88d6829920a3d8a1871c9fc85f92fd47f9fc": {
      "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
      "txHash": "0xd9dfd70d7dade9401f554acfa2a7a2d03c0488736a41bb823de5f375108c1327",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "GymVaultsBank",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:85"
          },
          {
            "contract": "GymVaultsBank",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:87"
          },
          {
            "contract": "GymVaultsBank",
            "label": "withdrawFee",
            "type": "t_uint256",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:88"
          },
          {
            "contract": "GymVaultsBank",
            "label": "farming",
            "type": "t_address",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:91"
          },
          {
            "contract": "GymVaultsBank",
            "label": "treasuryAddress",
            "type": "t_address",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:95"
          },
          {
            "contract": "GymVaultsBank",
            "label": "poolInfo",
            "type": "t_array(t_struct(PoolInfo)911_storage)dyn_storage",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:97"
          },
          {
            "contract": "GymVaultsBank",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)899_storage))",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:99"
          },
          {
            "contract": "GymVaultsBank",
            "label": "rewardPoolInfo",
            "type": "t_struct(RewardPoolInfo)916_storage",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:101"
          },
          {
            "contract": "GymVaultsBank",
            "label": "alpacaToWBNB",
            "type": "t_array(t_address)dyn_storage",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:103"
          },
          {
            "contract": "GymVaultsBank",
            "label": "lastChangeBlock",
            "type": "t_uint256",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:104"
          },
          {
            "contract": "GymVaultsBank",
            "label": "rewardPerBlockChangesCount",
            "type": "t_uint256",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:105"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(PoolInfo)911_storage)dyn_storage": {
            "label": "struct GymVaultsBank.PoolInfo[]"
          },
          "t_struct(PoolInfo)911_storage": {
            "label": "struct GymVaultsBank.PoolInfo",
            "members": [
              {
                "label": "want",
                "type": "t_contract(IERC20)350"
              },
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accRewardPerShare",
                "type": "t_uint256"
              },
              {
                "label": "strategy",
                "type": "t_address"
              }
            ]
          },
          "t_contract(IERC20)350": {
            "label": "contract IERC20"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)899_storage))": {
            "label": "mapping(uint256 => mapping(address => struct GymVaultsBank.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)899_storage)": {
            "label": "mapping(address => struct GymVaultsBank.UserInfo)"
          },
          "t_struct(UserInfo)899_storage": {
            "label": "struct GymVaultsBank.UserInfo",
            "members": [
              {
                "label": "shares",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(RewardPoolInfo)916_storage": {
            "label": "struct GymVaultsBank.RewardPoolInfo",
            "members": [
              {
                "label": "rewardToken",
                "type": "t_address"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "76789f6f009d1f4af492e5c2ad65bbd3312e08802b106ffcc229359273ee51ac": {
      "address": "0x59b670e9fA9D0A427751Af201D676719a970857b",
      "txHash": "0x59ed57e9f643c60b3ac97c06287676e85dcc8bf27d6b9c3ad74693374d64eecc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "GymVaultsBank",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:85"
          },
          {
            "contract": "GymVaultsBank",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:87"
          },
          {
            "contract": "GymVaultsBank",
            "label": "withdrawFee",
            "type": "t_uint256",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:88"
          },
          {
            "contract": "GymVaultsBank",
            "label": "farming",
            "type": "t_address",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:91"
          },
          {
            "contract": "GymVaultsBank",
            "label": "treasuryAddress",
            "type": "t_address",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:95"
          },
          {
            "contract": "GymVaultsBank",
            "label": "poolInfo",
            "type": "t_array(t_struct(PoolInfo)5152_storage)dyn_storage",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:97"
          },
          {
            "contract": "GymVaultsBank",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5140_storage))",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:99"
          },
          {
            "contract": "GymVaultsBank",
            "label": "rewardPoolInfo",
            "type": "t_struct(RewardPoolInfo)5157_storage",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:101"
          },
          {
            "contract": "GymVaultsBank",
            "label": "alpacaToWBNB",
            "type": "t_array(t_address)dyn_storage",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:103"
          },
          {
            "contract": "GymVaultsBank",
            "label": "lastChangeBlock",
            "type": "t_uint256",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:104"
          },
          {
            "contract": "GymVaultsBank",
            "label": "rewardPerBlockChangesCount",
            "type": "t_uint256",
            "src": "cache/solpp-generated-contracts/GymVaultsBank.sol:105"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(PoolInfo)5152_storage)dyn_storage": {
            "label": "struct GymVaultsBank.PoolInfo[]"
          },
          "t_struct(PoolInfo)5152_storage": {
            "label": "struct GymVaultsBank.PoolInfo",
            "members": [
              {
                "label": "want",
                "type": "t_contract(IERC20)1132"
              },
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accRewardPerShare",
                "type": "t_uint256"
              },
              {
                "label": "strategy",
                "type": "t_address"
              }
            ]
          },
          "t_contract(IERC20)1132": {
            "label": "contract IERC20"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5140_storage))": {
            "label": "mapping(uint256 => mapping(address => struct GymVaultsBank.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)5140_storage)": {
            "label": "mapping(address => struct GymVaultsBank.UserInfo)"
          },
          "t_struct(UserInfo)5140_storage": {
            "label": "struct GymVaultsBank.UserInfo",
            "members": [
              {
                "label": "shares",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(RewardPoolInfo)5157_storage": {
            "label": "struct GymVaultsBank.RewardPoolInfo",
            "members": [
              {
                "label": "rewardToken",
                "type": "t_address"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    }
  }
}
