{
  "address": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_earnToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "enterStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "leaveStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accCakePerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x91bcc6a965208379ae7908286cf306cc9e5f92ee2baae9997fd2e8f0abf5a061",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
    "transactionIndex": 0,
    "gasUsed": "840576",
    "logsBloom": "0x
    "blockHash": "0xb5e9e821b0b902c3c13bc212b75d1d73a5fbeb97dab1ea3c370926984802e3fd",
    "transactionHash": "0x91bcc6a965208379ae7908286cf306cc9e5f92ee2baae9997fd2e8f0abf5a061",
    "logs": [],
    "blockNumber": 20,
    "cumulativeGasUsed": "840576",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318"
  ],
  "solcInputHash": "84ef5644c902bb1e12b4215444b580ea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_earnToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"cache/solpp-generated-contracts/mocks/FarmMock.sol\":\"FarmMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/mocks/FarmMock.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract FarmMock {\\n    struct PoolInfo {\\n        address lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. CAKEs to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that CAKEs distribution occurs.\\n        uint256 accCakePerShare; // Accumulated CAKEs per share, times 1e12. See below.\\n    }\\n\\n    PoolInfo[] public poolInfo;\\n\\n    address earnToken;\\n\\n    constructor(address want, address _earnToken) {\\n        poolInfo.push(PoolInfo({lpToken: want, allocPoint: 10, lastRewardBlock: block.number, accCakePerShare: 0}));\\n\\n        earnToken = _earnToken;\\n    }\\n\\n    // Deposit LP tokens to MasterChef for CAKE allocation.\\n    function deposit(uint256 _pid, uint256 _amount) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        IERC20(pool.lpToken).transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (_amount > IERC20(pool.lpToken).balanceOf(address(this))) {\\n            _amount = IERC20(pool.lpToken).balanceOf(address(this));\\n        }\\n        IERC20(pool.lpToken).transfer(msg.sender, _amount);\\n        IERC20(earnToken).transfer(msg.sender, 10000);\\n    }\\n\\n    // Stake CAKE tokens to MasterChef\\n    function enterStaking(uint256 _amount) external {\\n        PoolInfo storage pool = poolInfo[0];\\n        IERC20(pool.lpToken).transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    // Withdraw CAKE tokens from STAKING.\\n    function leaveStaking(uint256 _amount) external {\\n        PoolInfo storage pool = poolInfo[0];\\n        if (_amount > IERC20(pool.lpToken).balanceOf(address(this))) {\\n            _amount = IERC20(pool.lpToken).balanceOf(address(this));\\n        }\\n        IERC20(pool.lpToken).transfer(msg.sender, _amount);\\n        IERC20(pool.lpToken).transfer(msg.sender, 10000);\\n    }\\n}\\n\",\"keccak256\":\"0x0a71ccef3f2a8137596166459a98e722684e8a2b4f8317c398b51d03da3162e6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610e06380380610e068339818101604052810190610032919061015a565b600060405180608001604052808473ffffffffffffffffffffffffffffffffffffffff168152602001600a81526020014381526020016000815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030155505080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506101e8565b600081519050610154816101d1565b92915050565b60008060408385031215610171576101706101cc565b5b600061017f85828601610145565b925050602061019085828601610145565b9150509250929050565b60006101a5826101ac565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6101da8161019a565b81146101e557600080fd5b50565b610c0f806101f76000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631058d2811461005c5780631526fe271461007857806341441d3b146100ab578063441a3e70146100c7578063e2bbb158146100e3575b600080fd5b6100766004803603810190610071919061096d565b6100ff565b005b610092600480360381019061008d919061096d565b6103f3565b6040516100a29493929190610ad8565b60405180910390f35b6100c560048036038101906100c0919061096d565b610453565b005b6100e160048036038101906100dc91906109c7565b610531565b005b6100fd60048036038101906100f891906109c7565b610823565b005b60008060008154811061011557610114610b77565b5b906000526020600020906004020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101829190610a34565b60206040518083038186803b15801561019a57600080fd5b505afa1580156101ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d2919061099a565b821115610289578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102369190610a34565b60206040518083038186803b15801561024e57600080fd5b505afa158015610262573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610286919061099a565b91505b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016102e8929190610aaf565b602060405180830381600087803b15801561030257600080fd5b505af1158015610316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033a9190610940565b508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336127106040518363ffffffff1660e01b815260040161039c929190610a86565b602060405180830381600087803b1580156103b657600080fd5b505af11580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee9190610940565b505050565b6000818154811061040357600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154905084565b60008060008154811061046957610468610b77565b5b906000526020600020906004020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016104da93929190610a4f565b602060405180830381600087803b1580156104f457600080fd5b505af1158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c9190610940565b505050565b600080838154811061054657610545610b77565b5b906000526020600020906004020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105b39190610a34565b60206040518083038186803b1580156105cb57600080fd5b505afa1580156105df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610603919061099a565b8211156106ba578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106679190610a34565b60206040518083038186803b15801561067f57600080fd5b505afa158015610693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b7919061099a565b91505b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610719929190610aaf565b602060405180830381600087803b15801561073357600080fd5b505af1158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b9190610940565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336127106040518363ffffffff1660e01b81526004016107cb929190610a86565b602060405180830381600087803b1580156107e557600080fd5b505af11580156107f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081d9190610940565b50505050565b600080838154811061083857610837610b77565b5b906000526020600020906004020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016108a993929190610a4f565b602060405180830381600087803b1580156108c357600080fd5b505af11580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb9190610940565b50505050565b60008151905061091081610bab565b92915050565b60008135905061092581610bc2565b92915050565b60008151905061093a81610bc2565b92915050565b60006020828403121561095657610955610ba6565b5b600061096484828501610901565b91505092915050565b60006020828403121561098357610982610ba6565b5b600061099184828501610916565b91505092915050565b6000602082840312156109b0576109af610ba6565b5b60006109be8482850161092b565b91505092915050565b600080604083850312156109de576109dd610ba6565b5b60006109ec85828601610916565b92505060206109fd85828601610916565b9150509250929050565b610a1081610b1d565b82525050565b610a1f81610b65565b82525050565b610a2e81610b5b565b82525050565b6000602082019050610a496000830184610a07565b92915050565b6000606082019050610a646000830186610a07565b610a716020830185610a07565b610a7e6040830184610a25565b949350505050565b6000604082019050610a9b6000830185610a07565b610aa86020830184610a16565b9392505050565b6000604082019050610ac46000830185610a07565b610ad16020830184610a25565b9392505050565b6000608082019050610aed6000830187610a07565b610afa6020830186610a25565b610b076040830185610a25565b610b146060830184610a25565b95945050505050565b6000610b2882610b3b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b7082610b5b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b610bb481610b2f565b8114610bbf57600080fd5b50565b610bcb81610b5b565b8114610bd657600080fd5b5056fea2646970667358221220c91ac8c1bc411a4120ac0a943f44d6e8d825eea214ebf3308888a7f17142449164736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80631058d2811461005c5780631526fe271461007857806341441d3b146100ab578063441a3e70146100c7578063e2bbb158146100e3575b600080fd5b6100766004803603810190610071919061096d565b6100ff565b005b610092600480360381019061008d919061096d565b6103f3565b6040516100a29493929190610ad8565b60405180910390f35b6100c560048036038101906100c0919061096d565b610453565b005b6100e160048036038101906100dc91906109c7565b610531565b005b6100fd60048036038101906100f891906109c7565b610823565b005b60008060008154811061011557610114610b77565b5b906000526020600020906004020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101829190610a34565b60206040518083038186803b15801561019a57600080fd5b505afa1580156101ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d2919061099a565b821115610289578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102369190610a34565b60206040518083038186803b15801561024e57600080fd5b505afa158015610262573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610286919061099a565b91505b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016102e8929190610aaf565b602060405180830381600087803b15801561030257600080fd5b505af1158015610316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033a9190610940565b508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336127106040518363ffffffff1660e01b815260040161039c929190610a86565b602060405180830381600087803b1580156103b657600080fd5b505af11580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee9190610940565b505050565b6000818154811061040357600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154905084565b60008060008154811061046957610468610b77565b5b906000526020600020906004020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016104da93929190610a4f565b602060405180830381600087803b1580156104f457600080fd5b505af1158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c9190610940565b505050565b600080838154811061054657610545610b77565b5b906000526020600020906004020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105b39190610a34565b60206040518083038186803b1580156105cb57600080fd5b505afa1580156105df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610603919061099a565b8211156106ba578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106679190610a34565b60206040518083038186803b15801561067f57600080fd5b505afa158015610693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b7919061099a565b91505b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610719929190610aaf565b602060405180830381600087803b15801561073357600080fd5b505af1158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b9190610940565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336127106040518363ffffffff1660e01b81526004016107cb929190610a86565b602060405180830381600087803b1580156107e557600080fd5b505af11580156107f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081d9190610940565b50505050565b600080838154811061083857610837610b77565b5b906000526020600020906004020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016108a993929190610a4f565b602060405180830381600087803b1580156108c357600080fd5b505af11580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb9190610940565b50505050565b60008151905061091081610bab565b92915050565b60008135905061092581610bc2565b92915050565b60008151905061093a81610bc2565b92915050565b60006020828403121561095657610955610ba6565b5b600061096484828501610901565b91505092915050565b60006020828403121561098357610982610ba6565b5b600061099184828501610916565b91505092915050565b6000602082840312156109b0576109af610ba6565b5b60006109be8482850161092b565b91505092915050565b600080604083850312156109de576109dd610ba6565b5b60006109ec85828601610916565b92505060206109fd85828601610916565b9150509250929050565b610a1081610b1d565b82525050565b610a1f81610b65565b82525050565b610a2e81610b5b565b82525050565b6000602082019050610a496000830184610a07565b92915050565b6000606082019050610a646000830186610a07565b610a716020830185610a07565b610a7e6040830184610a25565b949350505050565b6000604082019050610a9b6000830185610a07565b610aa86020830184610a16565b9392505050565b6000604082019050610ac46000830185610a07565b610ad16020830184610a25565b9392505050565b6000608082019050610aed6000830187610a07565b610afa6020830186610a25565b610b076040830185610a25565b610b146060830184610a25565b95945050505050565b6000610b2882610b3b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b7082610b5b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b610bb481610b2f565b8114610bbf57600080fd5b50565b610bcb81610b5b565b8114610bd657600080fd5b5056fea2646970667358221220c91ac8c1bc411a4120ac0a943f44d6e8d825eea214ebf3308888a7f17142449164736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9267,
        "contract": "cache/solpp-generated-contracts/mocks/FarmMock.sol:FarmMock",
        "label": "poolInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(PoolInfo)9263_storage)dyn_storage"
      },
      {
        "astId": 9269,
        "contract": "cache/solpp-generated-contracts/mocks/FarmMock.sol:FarmMock",
        "label": "earnToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)9263_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)9263_storage",
        "encoding": "dynamic_array",
        "label": "struct FarmMock.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_struct(PoolInfo)9263_storage": {
        "encoding": "inplace",
        "label": "struct FarmMock.PoolInfo",
        "members": [
          {
            "astId": 9256,
            "contract": "cache/solpp-generated-contracts/mocks/FarmMock.sol:FarmMock",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9258,
            "contract": "cache/solpp-generated-contracts/mocks/FarmMock.sol:FarmMock",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9260,
            "contract": "cache/solpp-generated-contracts/mocks/FarmMock.sol:FarmMock",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9262,
            "contract": "cache/solpp-generated-contracts/mocks/FarmMock.sol:FarmMock",
            "label": "accCakePerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}