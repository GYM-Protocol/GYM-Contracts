{
  "address": "0xC2d0819D425715CC2846819b588879F47A8b60ff",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_gym",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gymRewardRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "at",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "BUY_AND_BURN_GYM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELATIONSHIP_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULTS_SAVING",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_want",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBack",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "claimAndDeposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_referrerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBurnAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farming",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrateStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "want",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relationship",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "resetStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPoolInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_farmingAddress",
          "type": "address"
        }
      ],
      "name": "setFarmingAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "stakedWantTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcf8935f5df5c6428a17f9fac80f7c1753bb80fa3cff5accec61b80cf679c5d42",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "4413417",
    "logsBloom": "0x
    "blockHash": "0xa9b38b7b3bdc1092aa9a496fd0110f7fb05c74a45acc6da3fc5397a7ef9513aa",
    "transactionHash": "0xcf8935f5df5c6428a17f9fac80f7c1753bb80fa3cff5accec61b80cf679c5d42",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6,
        "transactionHash": "0xcf8935f5df5c6428a17f9fac80f7c1753bb80fa3cff5accec61b80cf679c5d42",
        "address": "0xC2d0819D425715CC2846819b588879F47A8b60ff",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa9b38b7b3bdc1092aa9a496fd0110f7fb05c74a45acc6da3fc5397a7ef9513aa"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6,
        "transactionHash": "0xcf8935f5df5c6428a17f9fac80f7c1753bb80fa3cff5accec61b80cf679c5d42",
        "address": "0xC2d0819D425715CC2846819b588879F47A8b60ff",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa9b38b7b3bdc1092aa9a496fd0110f7fb05c74a45acc6da3fc5397a7ef9513aa"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6,
        "transactionHash": "0xcf8935f5df5c6428a17f9fac80f7c1753bb80fa3cff5accec61b80cf679c5d42",
        "address": "0xC2d0819D425715CC2846819b588879F47A8b60ff",
        "topics": [
          "0x25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce79",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000006",
        "logIndex": 2,
        "blockHash": "0xa9b38b7b3bdc1092aa9a496fd0110f7fb05c74a45acc6da3fc5397a7ef9513aa"
      }
    ],
    "blockNumber": 6,
    "cumulativeGasUsed": "4413417",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "200",
    "0x83bCE25f327D397b104a7DE43Bd3191F89bf6955",
    "25728640000000000000"
  ],
  "solcInputHash": "a54ee544f440904c9f37be7b52a66529",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gym\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gymRewardRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BUY_AND_BURN_GYM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELATIONSHIP_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULTS_SAVING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBack\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"claimAndDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBurnAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farming\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relationship\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"resetStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmingAddress\",\"type\":\"address\"}],\"name\":\"setFarmingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakedWantTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(address,uint256,bool,address)\":{\"params\":{\"_allocPoint\":\": AllocPoint for new pool\",\"_strategy\":\": Address of Strategy contract\",\"_want\":\": Address of want token contract\",\"_withUpdate\":\": If true will call massUpdatePools function\"}},\"claim(uint256)\":{\"params\":{\"_pid\":\"pool Id\"}},\"claimAndDeposit(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_pid\":\": pool Id\"}},\"deposit(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_pid\":\": Pool id\",\"_referrerId\":\": Referrer address\",\"_wantAmt\":\": Amount of want token that user wants to deposit\"}},\"migrateStrategy(uint256,address)\":{\"params\":{\"_newStrategy\":\": New strategy contract address for pool\",\"_pid\":\": Pool id that will be updated\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingReward(uint256,address)\":{\"params\":{\"_pid\":\": Pool id where user has assets\",\"_user\":\": Users address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"resetStrategy(uint256,address)\":{\"params\":{\"_pid\":\": Pool id that will be updated\",\"_strategy\":\": New strategy contract address for pool\"}},\"set(uint256,uint256)\":{\"params\":{\"_allocPoint\":\": New allocPoint for pool\",\"_pid\":\": Pool id that will be updated\"}},\"setFarmingAddress(address)\":{\"params\":{\"_farmingAddress\":\"Address of treasury address\"}},\"setTreasuryAddress(address)\":{\"params\":{\"_treasuryAddress\":\"Address of treasury address\"}},\"setWithdrawFee(uint256)\":{\"params\":{\"_fee\":\"100 = 1%\"}},\"stakedWantTokens(uint256,address)\":{\"params\":{\"_pid\":\": Pool id where user has assets\",\"_user\":\": Users address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePool(uint256)\":{\"params\":{\"_pid\":\": Pool id that will be updated\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"_pid\":\": Pool id\",\"_wantAmt\":\": Amount of want token that user wants to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BUY_AND_BURN_GYM()\":{\"notice\":\"Percent of amount that will be sent to buyBack contract\"},\"RELATIONSHIP_REWARD()\":{\"notice\":\"Percent of amount that will be sent to relationship contract\"},\"VAULTS_SAVING()\":{\"notice\":\"Percent of amount that will be sent to vault contract\"},\"add(address,uint256,bool,address)\":{\"notice\":\"Function to Add pool\"},\"claim(uint256)\":{\"notice\":\"Claim users rewards from given pool\"},\"claimAll()\":{\"notice\":\"Claim users rewards from all pools\"},\"claimAndDeposit(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Claim users rewards and add deposit in Farming contract\"},\"deposit(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Deposit in given pool\"},\"massUpdatePools()\":{\"notice\":\"Update reward variables for all pools. Be careful of gas spending!\"},\"migrateStrategy(uint256,address)\":{\"notice\":\"Migrates all assets to new strategy. Can only be called by the owner\"},\"pendingReward(uint256,address)\":{\"notice\":\"View function to see pending reward on frontend.\"},\"poolInfo(uint256)\":{\"notice\":\"Info of each pool.\"},\"resetStrategy(uint256,address)\":{\"notice\":\"Update the given pool's strategy. Can only be called by the owner\"},\"rewardPoolInfo()\":{\"notice\":\"Info of reward pool\"},\"set(uint256,uint256)\":{\"notice\":\"Update the given pool's reward allocation point. Can only be called by the owner\"},\"setFarmingAddress(address)\":{\"notice\":\"Function to set Farming address\"},\"setTreasuryAddress(address)\":{\"notice\":\"Function to set Treasury address\"},\"setWithdrawFee(uint256)\":{\"notice\":\"Function to set withdraw fee\"},\"stakedWantTokens(uint256,address)\":{\"notice\":\"View function to see staked Want tokens on frontend.\"},\"startBlock()\":{\"notice\":\"Startblock number\"},\"totalAllocPoint()\":{\"notice\":\"Total allocation points. Must be the sum of all allocation points in all pools.\"},\"treasuryAddress()\":{\"notice\":\"Treasury address where will be sent all unused assets\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables of the given pool to be up-to-date.\"},\"updateRewardPerBlock()\":{\"notice\":\"Updates amount of reward tokens  per block that user will get. Can only be called by the owner\"},\"userInfo(uint256,address)\":{\"notice\":\"Info of each user that stakes want tokens.\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw user`s assets from pool\"}},\"notice\":\"GymVaultsBank contract: - Users can:   # Deposit token   # Deposit BNB   # Withdraw assets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"cache/solpp-generated-contracts/GymVaultsBank.sol\":\"GymVaultsBank\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/GymVaultsBank.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"./interfaces/IERC20Burnable.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IBuyBack.sol\\\";\\nimport \\\"./interfaces/IFairLaunch.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IFarming.sol\\\";\\nimport \\\"./interfaces/IGymMLM.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @notice GymVaultsBank contract:\\n * - Users can:\\n *   # Deposit token\\n *   # Deposit BNB\\n *   # Withdraw assets\\n */\\n\\ncontract GymVaultsBank is ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Info of each user\\n     * @param shares: How many LP tokens the user has provided\\n     * @param rewardDebt: Reward debt. See explanation below\\n     * @dev Any point in time, the amount of UTACOs entitled to a user but is pending to be distributed is:\\n     *   amount = user.shares / sharesTotal * wantLockedTotal\\n     *   pending reward = (amount * pool.accRewardPerShare) - user.rewardDebt\\n     *   Whenever a user deposits or withdraws want tokens to a pool. Here's what happens:\\n     *   1. The pool's `accRewardPerShare` (and `lastStakeTime`) gets updated.\\n     *   2. User receives the pending reward sent to his/her address.\\n     *   3. User's `amount` gets updated.\\n     *   4. User's `rewardDebt` gets updated.\\n     */\\n    struct UserInfo {\\n        uint256 shares;\\n        uint256 rewardDebt;\\n    }\\n    /**\\n     * @notice Info of each pool\\n     * @param want: Address of want token contract\\n     * @param allocPoint: How many allocation points assigned to this pool. GYM to distribute per block\\n     * @param lastRewardBlock: Last block number that reward distribution occurs\\n     * @param accUTacoPerShare: Accumulated rewardPool per share, times 1e18\\n     * @param strategy: Address of strategy contract\\n     */\\n    struct PoolInfo {\\n        IERC20 want;\\n        uint256 allocPoint;\\n        uint256 lastRewardBlock;\\n        uint256 accRewardPerShare; \\n        address strategy;\\n    }\\n\\n    /**\\n     * @notice Info of each rewartPool\\n     * @param rewardToken: Address of reward token contract\\n     * @param rewardPerBlock: How many reward tokens will user get per block\\n     * @param totalPaidRewards: Total amount of reward tokens was paid\\n     */\\n\\n    struct RewardPoolInfo {\\n        address rewardToken;\\n        uint256 rewardPerBlock;\\n    }\\n\\n    /// Percent of amount that will be sent to relationship contract\\n    uint256 public constant RELATIONSHIP_REWARD = 45;\\n    /// Percent of amount that will be sent to vault contract\\n    uint256 public constant VAULTS_SAVING = 45;\\n    /// Percent of amount that will be sent to buyBack contract\\n    uint256 public constant BUY_AND_BURN_GYM = 10;\\n\\n    /// Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint;\\n    /// Startblock number\\n    uint256 public startBlock;\\n    uint256 public withdrawFee;\\n    // contracts[8] - Buyback address\\n    address public constant buyBack = 0x5F950eE30b88ad46DE2250c2d367397c4098281c;\\n    address public farming;\\n    // contracts[7] - RelationShip address\\n    address public constant relationship = 0x5772Ae803B430cB5D1260Cc33Aa2c8F89aD1d488;\\n    /// Treasury address where will be sent all unused assets\\n    address public treasuryAddress;\\n    /// Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    /// Info of each user that stakes want tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    /// Info of reward pool\\n    RewardPoolInfo public rewardPoolInfo;\\n\\n    address[] private alpacaToWBNB;\\n    uint256 private lastChangeBlock;\\n    uint256 private rewardPerBlockChangesCount;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Initialized(address indexed executor, uint256 at);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event RewardPaid(address indexed token, address indexed user, uint256 amount);\\n\\n    constructor(\\n        uint256 _startBlock,\\n        address _gym,\\n        uint256 _gymRewardRate\\n    ){\\n        require(block.number < _startBlock, \\\"GymVaultsBank: Start block must have a bigger value\\\");\\n\\n        startBlock = _startBlock;\\n        rewardPoolInfo = RewardPoolInfo({rewardToken: _gym, rewardPerBlock: _gymRewardRate});\\n        alpacaToWBNB = [0x8A791620dd6260079BF849Dc5567aDC3F2FdC318, 0x9A676e781A523b5d0C0e43731313A708CB607508];\\n        lastChangeBlock = _startBlock;\\n        rewardPerBlockChangesCount = 3;\\n        transferOwnership(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266);\\n        emit Initialized(msg.sender, block.number);\\n    }\\n\\n    modifier onlyOnGymMLM() {\\n        require(IGymMLM(relationship).isOnGymMLM(msg.sender), \\\"GymVaultsBank: Don't have relationship\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    /**\\n     * @notice Update the given pool's reward allocation point. Can only be called by the owner\\n     * @param _pid: Pool id that will be updated\\n     * @param _allocPoint: New allocPoint for pool\\n     */\\n    function set(uint256 _pid, uint256 _allocPoint) external onlyOwner {\\n        massUpdatePools();\\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    /**\\n     * @notice Update the given pool's strategy. Can only be called by the owner\\n     * @param _pid: Pool id that will be updated\\n     * @param _strategy: New strategy contract address for pool\\n     */\\n    function resetStrategy(uint256 _pid, address _strategy) external onlyOwner {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n            pool.want.balanceOf(poolInfo[_pid].strategy) == 0 || pool.accRewardPerShare == 0,\\n            \\\"GymVaultsBank: Strategy not empty\\\"\\n        );\\n        poolInfo[_pid].strategy = _strategy;\\n    }\\n\\n    /**\\n     * @notice Migrates all assets to new strategy. Can only be called by the owner\\n     * @param _pid: Pool id that will be updated\\n     * @param _newStrategy: New strategy contract address for pool\\n     */\\n    function migrateStrategy(uint256 _pid, address _newStrategy) external onlyOwner {\\n        require(\\n            IStrategy(_newStrategy).wantLockedTotal() == 0 && IStrategy(_newStrategy).sharesTotal() == 0,\\n            \\\"GymVaultsBank: New strategy not empty\\\"\\n        );\\n        PoolInfo storage pool = poolInfo[_pid];\\n        address _oldStrategy = pool.strategy;\\n        uint256 _oldSharesTotal = IStrategy(_oldStrategy).sharesTotal();\\n        uint256 _oldWantAmt = IStrategy(_oldStrategy).wantLockedTotal();\\n        IStrategy(_oldStrategy).withdraw(address(this), _oldWantAmt);\\n        pool.want.transfer(_newStrategy, _oldWantAmt);\\n        IStrategy(_newStrategy).migrateFrom(_oldStrategy, _oldWantAmt, _oldSharesTotal);\\n        pool.strategy = _newStrategy;\\n    }\\n\\n    /**\\n     * @notice Updates amount of reward tokens  per block that user will get. Can only be called by the owner\\n     */\\n    function updateRewardPerBlock() external nonReentrant onlyOwner {\\n        massUpdatePools();\\n        if (block.number - lastChangeBlock > 20 && rewardPerBlockChangesCount > 0) {\\n            rewardPoolInfo.rewardPerBlock = (rewardPoolInfo.rewardPerBlock * 972222222200) / 1e12;\\n            rewardPerBlockChangesCount -= 1;\\n            lastChangeBlock = block.number;\\n        }\\n    }\\n\\n    /**\\n     * @notice View function to see pending reward on frontend.\\n     * @param _pid: Pool id where user has assets\\n     * @param _user: Users address\\n     */\\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 _accRewardPerShare = pool.accRewardPerShare;\\n        uint256 sharesTotal = IStrategy(pool.strategy).sharesTotal();\\n        if (block.number > pool.lastRewardBlock && sharesTotal != 0) {\\n            uint256 _multiplier = block.number - pool.lastRewardBlock;\\n            uint256 _reward = (_multiplier * rewardPoolInfo.rewardPerBlock * pool.allocPoint) / totalAllocPoint;\\n            _accRewardPerShare = _accRewardPerShare + ((_reward * 1e18) / sharesTotal);\\n        }\\n        return (user.shares * _accRewardPerShare) / 1e18 - user.rewardDebt;\\n    }\\n\\n    /**\\n     * @notice View function to see staked Want tokens on frontend.\\n     * @param _pid: Pool id where user has assets\\n     * @param _user: Users address\\n     */\\n    function stakedWantTokens(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 sharesTotal = IStrategy(pool.strategy).sharesTotal();\\n        uint256 wantLockedTotal = IStrategy(poolInfo[_pid].strategy).wantLockedTotal();\\n        if (sharesTotal == 0) {\\n            return 0;\\n        }\\n        return (user.shares * wantLockedTotal) / sharesTotal;\\n    }\\n\\n    /**\\n     * @notice Deposit in given pool\\n     * @param _pid: Pool id\\n     * @param _wantAmt: Amount of want token that user wants to deposit\\n     * @param _referrerId: Referrer address\\n     */\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _wantAmt,\\n        uint256 _referrerId,\\n        uint256 _minBurnAmt,\\n        uint256 _deadline\\n    ) external payable {\\n        IGymMLM(relationship).addGymMLM(msg.sender, _referrerId);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (address(pool.want) == 0x9A676e781A523b5d0C0e43731313A708CB607508) {\\n            // If `want` is WBNB\\n            IWETH(0x9A676e781A523b5d0C0e43731313A708CB607508).deposit{value: msg.value}();\\n            _wantAmt = msg.value;\\n        }\\n        _deposit(_pid, _wantAmt, _minBurnAmt, _deadline);\\n    }\\n\\n    /**\\n     * @notice Withdraw user`s assets from pool\\n     * @param _pid: Pool id\\n     * @param _wantAmt: Amount of want token that user wants to withdraw\\n     */\\n    function withdraw(uint256 _pid, uint256 _wantAmt) external nonReentrant {\\n        _withdraw(_pid, _wantAmt);\\n    }\\n\\n    /**\\n     * @notice Claim users rewards and add deposit in Farming contract\\n     * @param _pid: pool Id\\n     */\\n    function claimAndDeposit(\\n        uint256 _pid,\\n        uint256 _amountTokenMin,\\n        uint256 _amountETHMin,\\n        uint256 _minAmountOut,\\n        uint256 _deadline\\n    ) external payable {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        uint256 pending = (user.shares * pool.accRewardPerShare) / (1e18) - (user.rewardDebt);\\n        if (pending > 0) {\\n            IERC20(rewardPoolInfo.rewardToken).approve(farming, pending);\\n            IFarming(farming).autoDeposit{value: msg.value}(\\n                0,\\n                pending,\\n                _amountTokenMin,\\n                _amountETHMin,\\n                _minAmountOut,\\n                msg.sender,\\n                _deadline\\n            );\\n        }\\n        user.rewardDebt = (user.shares * (pool.accRewardPerShare)) / (1e18);\\n    }\\n\\n    /**\\n     * @notice Claim users rewards from all pools\\n     */\\n    function claimAll() external {\\n        uint256 length = poolLength();\\n        for (uint256 i = 0; i <= length - 1; i++) {\\n            claim(i);\\n        }\\n    }\\n\\n    /**\\n     * @notice  Function to set Treasury address\\n     * @param _treasuryAddress Address of treasury address\\n     */\\n    function setTreasuryAddress(address _treasuryAddress) external nonReentrant onlyOwner {\\n        treasuryAddress = _treasuryAddress;\\n    }\\n\\n    /**\\n     * @notice  Function to set Farming address\\n     * @param _farmingAddress Address of treasury address\\n     */\\n    function setFarmingAddress(address _farmingAddress) external nonReentrant onlyOwner {\\n        farming = _farmingAddress;\\n    }\\n\\n    /**\\n     * @notice  Function to set withdraw fee\\n     * @param _fee 100 = 1%\\n     */\\n    function setWithdrawFee(uint256 _fee) external nonReentrant onlyOwner {\\n        withdrawFee = _fee;\\n    }\\n\\n    function poolLength() public view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    /**\\n     * @notice Claim users rewards from given pool\\n     * @param _pid pool Id\\n     */\\n    function claim(uint256 _pid) public {\\n        updatePool(_pid);\\n        _claim(_pid);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        user.rewardDebt = (user.shares * (pool.accRewardPerShare)) / (1e18);\\n    }\\n\\n    /**\\n     * @notice Function to Add pool\\n     * @param _want: Address of want token contract\\n     * @param _allocPoint: AllocPoint for new pool\\n     * @param _withUpdate: If true will call massUpdatePools function\\n     * @param _strategy: Address of Strategy contract\\n     */\\n    function add(\\n        IERC20 _want,\\n        uint256 _allocPoint,\\n        bool _withUpdate,\\n        address _strategy\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\n        poolInfo.push(\\n            PoolInfo({\\n                want: _want,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accRewardPerShare: 0,\\n                strategy: _strategy\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @notice Update reward variables for all pools. Be careful of gas spending!\\n     */\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update reward variables of the given pool to be up-to-date.\\n     * @param _pid: Pool id that will be updated\\n     */\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 sharesTotal = IStrategy(pool.strategy).sharesTotal();\\n        if (sharesTotal == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = block.number - pool.lastRewardBlock;\\n        if (multiplier <= 0) {\\n            return;\\n        }\\n        uint256 _rewardPerBlock = rewardPoolInfo.rewardPerBlock;\\n        uint256 _reward = (multiplier * _rewardPerBlock * pool.allocPoint) / totalAllocPoint;\\n        pool.accRewardPerShare = pool.accRewardPerShare + ((_reward * 1e18) / sharesTotal);\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    /**\\n     * @notice  Safe transfer function for reward tokens\\n     * @param _rewardToken Address of reward token contract\\n     * @param _to Address of reciever\\n     * @param _amount Amount of reward tokens to transfer\\n     */\\n    function safeRewardTransfer(\\n        address _rewardToken,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        uint256 _bal = IERC20(_rewardToken).balanceOf(address(this));\\n        if (_amount > _bal) {\\n            IERC20(_rewardToken).transfer(_to, _bal);\\n        } else {\\n            IERC20(_rewardToken).transfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates amount of reward user will get.\\n     * @param _pid: Pool id\\n     */\\n    function _claim(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 pending = (user.shares * pool.accRewardPerShare) / (1e18) - (user.rewardDebt);\\n        if (pending > 0) {\\n            address rewardToken = rewardPoolInfo.rewardToken;\\n            safeRewardTransfer(rewardToken, msg.sender, pending);\\n            emit RewardPaid(rewardToken, msg.sender, pending);\\n        }\\n    }\\n\\n    /**\\n     * @notice Private deposit function\\n     * @param _pid: Pool id\\n     * @param _wantAmt: Amount of want token that user wants to deposit\\n     */\\n    function _deposit(\\n        uint256 _pid,\\n        uint256 _wantAmt,\\n        uint256 _minBurnAmt,\\n        uint256 _deadline\\n    ) private {\\n        updatePool(_pid);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        if (user.shares > 0) {\\n            _claim(_pid);\\n        }\\n\\n        if (_wantAmt > 0) {\\n            if (address(pool.want) != 0x9A676e781A523b5d0C0e43731313A708CB607508) {\\n                // If `want` not WBNB\\n                pool.want.safeTransferFrom(address(msg.sender), address(this), _wantAmt);\\n            }\\n\\n            pool.want.safeTransfer(relationship, (_wantAmt * RELATIONSHIP_REWARD) / 100);\\n\\n            // Distribute MLM rewards\\n            IGymMLM(relationship).distributeRewards(_wantAmt, address(pool.want), msg.sender);\\n\\n            pool.want.safeTransfer(buyBack, (_wantAmt * BUY_AND_BURN_GYM) / 100);\\n\\n            IBuyBack(buyBack).buyAndBurnToken(\\n                address(pool.want),\\n                (_wantAmt * BUY_AND_BURN_GYM) / 100,\\n                rewardPoolInfo.rewardToken,\\n                _minBurnAmt,\\n                _deadline\\n            );\\n\\n            _wantAmt = (_wantAmt * VAULTS_SAVING) / 100;\\n            pool.want.safeIncreaseAllowance(pool.strategy, _wantAmt);\\n            uint256 sharesAdded = IStrategy(poolInfo[_pid].strategy).deposit(msg.sender, _wantAmt);\\n\\n            user.shares = user.shares + sharesAdded;\\n        }\\n        user.rewardDebt = (user.shares * (pool.accRewardPerShare)) / (1e18);\\n\\n        // Send unsent rewards to the treasury address\\n        _transfer(address(pool.want), treasuryAddress, pool.want.balanceOf(address(this)));\\n\\n        emit Deposit(msg.sender, _pid, _wantAmt);\\n    }\\n\\n    /**\\n     * @notice Private withdraw function\\n     * @param _pid: Pool id\\n     * @param _wantAmt: Amount of want token that user wants to withdraw\\n     */\\n    function _withdraw(uint256 _pid, uint256 _wantAmt) private {\\n        updatePool(_pid);\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint256 wantLockedTotal = IStrategy(poolInfo[_pid].strategy).wantLockedTotal();\\n        uint256 sharesTotal = IStrategy(poolInfo[_pid].strategy).sharesTotal();\\n\\n        require(user.shares > 0, \\\"GymVaultsBank: user.shares is 0\\\");\\n        require(sharesTotal > 0, \\\"GymVaultsBank: sharesTotal is 0\\\");\\n\\n        _claim(_pid);\\n\\n        // Withdraw want tokens\\n        uint256 amount = (user.shares * (wantLockedTotal)) / (sharesTotal);\\n        if (_wantAmt > amount) {\\n            _wantAmt = amount;\\n        }\\n        if (_wantAmt > 0) {\\n            uint256 sharesRemoved = IStrategy(poolInfo[_pid].strategy).withdraw(msg.sender, _wantAmt);\\n            user.shares -= sharesRemoved;\\n\\n            uint256 wantBal = IERC20(pool.want).balanceOf(address(this));\\n            if (wantBal < _wantAmt) {\\n                _wantAmt = wantBal;\\n            }\\n\\n            if (_wantAmt > 0) {\\n                _transfer(address(pool.want), treasuryAddress, (_wantAmt * withdrawFee) / 10000);\\n                _transfer(address(pool.want), msg.sender, pool.want.balanceOf(address(this)));\\n            }\\n        }\\n        user.rewardDebt = (user.shares * (pool.accRewardPerShare)) / (1e18);\\n\\n        emit Withdraw(msg.sender, _pid, _wantAmt);\\n    }\\n\\n    function _transfer(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) private {\\n        if (_token == 0x9A676e781A523b5d0C0e43731313A708CB607508) {\\n            // If _token is WBNB\\n            IWETH(_token).withdraw(_amount);\\n            payable(_receiver).transfer(_amount);\\n        } else {\\n            IERC20(_token).safeTransfer(_receiver, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x01ce20272b76542997d9241643ad940ce5e60da888d56020650dc2813b9890a9\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/interfaces/IBuyBack.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\ninterface IBuyBack {\\n    function buyAndBurnToken(\\n        address,\\n        uint256,\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xc4ddcc36f7bafb5a496227f7d3e41f3b3180ff63ff0170fc9de7118c272354e1\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/interfaces/IERC20Burnable.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Burnable is IERC20 {\\n    function burn(uint256 _amount) external;\\n\\n    function burnFrom(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x1caba3169c15961c34cc59f0f0ab22126e250bbed7ccd24fb89dcab9f714e272\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/interfaces/IFairLaunch.sol\":{\"content\":\"pragma solidity 0.8.7;\\npragma experimental ABIEncoderV2;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\n\\ninterface IFairLaunchV1 {\\n    // Data structure\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 bonusDebt;\\n        address fundedBy;\\n    }\\n    struct PoolInfo {\\n        address stakeToken;\\n        uint256 allocPoint;\\n        uint256 lastRewardBlock;\\n        uint256 accAlpacaPerShare;\\n        uint256 accAlpacaPerShareTilBonusEnd;\\n    }\\n\\n    // Information query functions\\n    function userInfo(uint256 pid, address user) external view returns (IFairLaunchV1.UserInfo memory);\\n\\n    // User's interaction functions\\n    function pendingAlpaca(uint256 _pid, address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x258d53cbb2419d4639d1c1e70c5552cdb507284e180fde9d18ee5dec999f82ed\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/interfaces/IFarming.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n\\n\\n// SPDX-License-Identifier: MIT\\n\\ninterface IFarming {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n    struct PoolInfo {\\n        address lpToken;\\n        uint256 allocPoint;\\n        uint256 lastRewardBlock;\\n        uint256 accRewardPerShare;\\n    }\\n\\n    function autoDeposit(\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        uint256\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x15ec6bb255059192f6ac2609bdab24f65f83a4b2c005a002c9da6ce3b424830f\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/interfaces/IGymMLM.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\n\\ninterface IGymMLM {\\n    function isOnGymMLM(address) external view returns (bool);\\n\\n    function addGymMLM(address, uint256) external;\\n\\n    function distributeRewards(\\n        uint256,\\n        address,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0x45f6bd88993e5120455480bb2b1b805c3af65f78b4a2cde3ee089fc37e8e04cb\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/interfaces/IStrategy.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\n\\ninterface IStrategy {\\n    // Total want tokens managed by strategy\\n    function wantLockedTotal() external view returns (uint256);\\n\\n    // Sum of all shares of users to wantLockedTotal\\n    function sharesTotal() external view returns (uint256);\\n\\n    function wantAddress() external view returns (address);\\n\\n    function token0Address() external view returns (address);\\n\\n    function token1Address() external view returns (address);\\n\\n    function earnedAddress() external view returns (address);\\n\\n    function ratio0() external view returns (uint256);\\n\\n    function ratio1() external view returns (uint256);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    // Main want token compounding function\\n    function earn(uint256 _amountOutAmt, uint256 _deadline) external;\\n\\n    // Transfer want tokens autoFarm -> strategy\\n    function deposit(address _userAddress, uint256 _wantAmt) external returns (uint256);\\n\\n    // Transfer want tokens strategy -> autoFarm\\n    function withdraw(address _userAddress, uint256 _wantAmt) external returns (uint256);\\n\\n    function migrateFrom(\\n        address _oldStrategy,\\n        uint256 _oldWantLockedTotal,\\n        uint256 _oldSharesTotal\\n    ) external;\\n\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa6c013bad2ac1ea8ff3e0fb207e87b4708654159aeeb3c795d3c311792c3ada4\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/interfaces/IVault.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\ninterface IVault {\\n    /// @dev Return the total ERC20 entitled to the token holders. Be careful of unaccrued interests.\\n    function totalToken() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @dev Add more ERC20 to the bank. Hope to get some good returns.\\n    function deposit(uint256 amountToken) external payable;\\n\\n    /// @dev Withdraw ERC20 from the bank by burning the share tokens.\\n    function withdraw(uint256 share) external;\\n\\n    /// @dev Request funds from user through Vault\\n    function requestFunds(address targetedToken, uint256 amount) external;\\n\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc7b1a32d97e83ddaf4ffc75ce81836c3562265f63602849b52374c4159b8e15a\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n// SPDX-License-Identifier: MIT\\n\\n\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n}\\n\",\"keccak256\":\"0xa6b80fed0a34ce408142cb818b5fb1732d47da0bf6191e960feb40a3ce2779a0\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620052533803806200525383398181016040528101906200003791906200054b565b60016000819055506200005f620000536200026160201b60201c565b6200026960201b60201c565b824310620000a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200009b906200064f565b60405180910390fd5b8260038190555060405180604001604052808373ffffffffffffffffffffffffffffffffffffffff16815260200182815250600960008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506040518060400160405280738a791620dd6260079bf849dc5567adc3f2fdc31873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001739a676e781a523b5d0c0e43731313a708cb60750873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250600b906002620001d39291906200046f565b5082600c819055506003600d819055506200020873f39fd6e51aad88f6f4ce6ab8827279cfffb922666200032f60201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff167f25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce794360405162000250919062000693565b60405180910390a2505050620007ff565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200033f6200026160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620003656200044560201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620003be576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003b59062000671565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000431576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000428906200062d565b60405180910390fd5b62000442816200026960201b60201c565b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b828054828255906000526020600020908101928215620004eb579160200282015b82811115620004ea5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000490565b5b509050620004fa9190620004fe565b5090565b5b8082111562000519576000816000905550600101620004ff565b5090565b6000815190506200052e81620007cb565b92915050565b6000815190506200054581620007e5565b92915050565b600080600060608486031215620005675762000566620006ff565b5b6000620005778682870162000534565b93505060206200058a868287016200051d565b92505060406200059d8682870162000534565b9150509250925092565b6000620005b6602683620006b0565b9150620005c38262000704565b604082019050919050565b6000620005dd603383620006b0565b9150620005ea8262000753565b604082019050919050565b600062000604602083620006b0565b91506200061182620007a2565b602082019050919050565b6200062781620006f5565b82525050565b600060208201905081810360008301526200064881620005a7565b9050919050565b600060208201905081810360008301526200066a81620005ce565b9050919050565b600060208201905081810360008301526200068c81620005f5565b9050919050565b6000602082019050620006aa60008301846200061c565b92915050565b600082825260208201905092915050565b6000620006ce82620006d5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f47796d5661756c747342616e6b3a20537461727420626c6f636b206d7573742060008201527f686176652061206269676765722076616c756500000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b620007d681620006c1565b8114620007e257600080fd5b50565b620007f081620006f5565b8114620007fc57600080fd5b50565b614a44806200080f6000396000f3fe6080604052600436106101fd5760003560e01c8063889dbba61161010d578063bf02b5ea116100a0578063d47039691161006f578063d4703969146106c6578063df27123a146106f2578063e0257d0314610709578063e941fa7814610732578063f2fde38b1461075d57610204565b8063bf02b5ea1461063f578063c09969df1461065b578063c5f956af14610684578063d1058e59146106af57610204565b8063a2dac829116100dc578063a2dac82914610597578063acdf4f18146105c2578063b001f618146105ed578063b6ac642a1461061657610204565b8063889dbba6146104d55780638da5cb5b146104f157806393f1a40b1461051c57806398969e821461055a57610204565b806348cd4cb111610190578063630b5ba11161015f578063630b5ba1146104165780636605bfda1461042d578063715018a6146104565780637b84daec1461046d5780637e5dbd8e146104aa57610204565b806348cd4cb11461036c5780634e3ad80f14610397578063516d1896146103c257806351eb05a6146103ed57610204565b80631ab06ee5116101cc5780631ab06ee5146102c6578063379607f5146102ef578063441a3e701461031857806345b08a961461034157610204565b8063081e3eda146102065780631155f81e146102315780631526fe271461025a57806317caf6f11461029b57610204565b3661020457005b005b34801561021257600080fd5b5061021b610786565b60405161022891906143d7565b60405180910390f35b34801561023d57600080fd5b5061025860048036038101906102539190613d6f565b610793565b005b34801561026657600080fd5b50610281600480360381019061027c9190613d15565b6109e1565b6040516102929594939291906141b3565b60405180910390f35b3480156102a757600080fd5b506102b0610a67565b6040516102bd91906143d7565b60405180910390f35b3480156102d257600080fd5b506102ed60048036038101906102e89190613daf565b610a6d565b005b3480156102fb57600080fd5b5061031660048036038101906103119190613d15565b610b63565b005b34801561032457600080fd5b5061033f600480360381019061033a9190613daf565b610c23565b005b34801561034d57600080fd5b50610356610c87565b6040516103639190614085565b60405180910390f35b34801561037857600080fd5b50610381610c9f565b60405161038e91906143d7565b60405180910390f35b3480156103a357600080fd5b506103ac610ca5565b6040516103b99190614085565b60405180910390f35b3480156103ce57600080fd5b506103d7610ccb565b6040516103e491906143d7565b60405180910390f35b3480156103f957600080fd5b50610414600480360381019061040f9190613d15565b610cd0565b005b34801561042257600080fd5b5061042b610e68565b005b34801561043957600080fd5b50610454600480360381019061044f9190613c54565b610e9b565b005b34801561046257600080fd5b5061046b610fb1565b005b34801561047957600080fd5b50610494600480360381019061048f9190613d6f565b611039565b6040516104a191906143d7565b60405180910390f35b3480156104b657600080fd5b506104bf61125f565b6040516104cc91906143d7565b60405180910390f35b6104ef60048036038101906104ea9190613def565b611264565b005b3480156104fd57600080fd5b506105066114d4565b6040516105139190614085565b60405180910390f35b34801561052857600080fd5b50610543600480360381019061053e9190613d6f565b6114fe565b604051610551929190614429565b60405180910390f35b34801561056657600080fd5b50610581600480360381019061057c9190613d6f565b61152f565b60405161058e91906143d7565b60405180910390f35b3480156105a357600080fd5b506105ac611724565b6040516105b991906143d7565b60405180910390f35b3480156105ce57600080fd5b506105d7611729565b6040516105e49190614085565b60405180910390f35b3480156105f957600080fd5b50610614600480360381019061060f9190613c54565b611741565b005b34801561062257600080fd5b5061063d60048036038101906106389190613d15565b611857565b005b61065960048036038101906106549190613def565b611933565b005b34801561066757600080fd5b50610682600480360381019061067d9190613cae565b611ad3565b005b34801561069057600080fd5b50610699611cbd565b6040516106a69190614085565b60405180910390f35b3480156106bb57600080fd5b506106c4611ce3565b005b3480156106d257600080fd5b506106db611d25565b6040516106e9929190614100565b60405180910390f35b3480156106fe57600080fd5b50610707611d57565b005b34801561071557600080fd5b50610730600480360381019061072b9190613d6f565b611ea8565b005b34801561073e57600080fd5b506107476123ba565b60405161075491906143d7565b60405180910390f35b34801561076957600080fd5b50610784600480360381019061077f9190613c54565b6123c0565b005b6000600780549050905090565b61079b6124b8565b73ffffffffffffffffffffffffffffffffffffffff166107b96114d4565b73ffffffffffffffffffffffffffffffffffffffff161461080f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080690614317565b60405180910390fd5b60006007838154811061082557610824614715565b5b9060005260206000209060050201905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082316007868154811061088b5761088a614715565b5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016108d99190614085565b60206040518083038186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190613d42565b1480610939575060008160030154145b610978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096f90614357565b60405180910390fd5b816007848154811061098d5761098c614715565b5b906000526020600020906005020160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600781815481106109f157600080fd5b90600052602060002090600502016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905085565b60025481565b610a756124b8565b73ffffffffffffffffffffffffffffffffffffffff16610a936114d4565b73ffffffffffffffffffffffffffffffffffffffff1614610ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae090614317565b60405180910390fd5b610af1610e68565b8060078381548110610b0657610b05614715565b5b906000526020600020906005020160010154600254610b259190614565565b610b2f9190614484565b6002819055508060078381548110610b4a57610b49614715565b5b9060005260206000209060050201600101819055505050565b610b6c81610cd0565b610b75816124c0565b600060078281548110610b8b57610b8a614715565b5b9060005260206000209060050201905060006008600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050670de0b6b3a764000082600301548260000154610c0c919061450b565b610c1691906144da565b8160010181905550505050565b60026000541415610c69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c60906143b7565b60405180910390fd5b6002600081905550610c7b828261261f565b60016000819055505050565b735772ae803b430cb5d1260cc33aa2c8f89ad1d48881565b60035481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b602d81565b600060078281548110610ce657610ce5614715565b5b9060005260206000209060050201905080600201544311610d075750610e65565b60008160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7357600080fd5b505afa158015610d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dab9190613d42565b90506000811415610dc6574382600201819055505050610e65565b6000826002015443610dd89190614565565b905060008111610dea57505050610e65565b60006009600101549050600060025485600101548385610e0a919061450b565b610e14919061450b565b610e1e91906144da565b905083670de0b6b3a764000082610e35919061450b565b610e3f91906144da565b8560030154610e4e9190614484565b856003018190555043856002018190555050505050505b50565b6000600780549050905060005b81811015610e9757610e8681610cd0565b80610e909061466e565b9050610e75565b5050565b60026000541415610ee1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed8906143b7565b60405180910390fd5b6002600081905550610ef16124b8565b73ffffffffffffffffffffffffffffffffffffffff16610f0f6114d4565b73ffffffffffffffffffffffffffffffffffffffff1614610f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5c90614317565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160008190555050565b610fb96124b8565b73ffffffffffffffffffffffffffffffffffffffff16610fd76114d4565b73ffffffffffffffffffffffffffffffffffffffff161461102d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102490614317565b60405180910390fd5b6110376000612c7f565b565b600080600784815481106110505761104f614715565b5b9060005260206000209060050201905060006008600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561112057600080fd5b505afa158015611134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111589190613d42565b90506000600787815481106111705761116f614715565b5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342da4eb36040518163ffffffff1660e01b815260040160206040518083038186803b1580156111e757600080fd5b505afa1580156111fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121f9190613d42565b90506000821415611237576000945050505050611259565b81818460000154611248919061450b565b61125291906144da565b9450505050505b92915050565b602d81565b60006007868154811061127a57611279614715565b5b9060005260206000209060050201905060006008600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506112e787610cd0565b60008160010154670de0b6b3a76400008460030154846000015461130b919061450b565b61131591906144da565b61131f9190614565565b9050600081111561149b57600960000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016113ac929190614100565b602060405180830381600087803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fe9190613c81565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663419bb796346000848b8b8b338c6040518963ffffffff1660e01b81526004016114689796959493929190614206565b6000604051808303818588803b15801561148157600080fd5b505af1158015611495573d6000803e3d6000fd5b50505050505b670de0b6b3a7640000836003015483600001546114b8919061450b565b6114c291906144da565b82600101819055505050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6008602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b6000806007848154811061154657611545614715565b5b9060005260206000209060050201905060006008600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008260030154905060008360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561161f57600080fd5b505afa158015611633573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116579190613d42565b905083600201544311801561166d575060008114155b156116e65760008460020154436116849190614565565b905060006002548660010154600960010154846116a1919061450b565b6116ab919061450b565b6116b591906144da565b905082670de0b6b3a7640000826116cc919061450b565b6116d691906144da565b846116e19190614484565b935050505b8260010154670de0b6b3a7640000838560000154611704919061450b565b61170e91906144da565b6117189190614565565b94505050505092915050565b600a81565b735f950ee30b88ad46de2250c2d367397c4098281c81565b60026000541415611787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177e906143b7565b60405180910390fd5b60026000819055506117976124b8565b73ffffffffffffffffffffffffffffffffffffffff166117b56114d4565b73ffffffffffffffffffffffffffffffffffffffff161461180b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180290614317565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160008190555050565b6002600054141561189d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611894906143b7565b60405180910390fd5b60026000819055506118ad6124b8565b73ffffffffffffffffffffffffffffffffffffffff166118cb6114d4565b73ffffffffffffffffffffffffffffffffffffffff1614611921576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191890614317565b60405180910390fd5b80600481905550600160008190555050565b735772ae803b430cb5d1260cc33aa2c8f89ad1d48873ffffffffffffffffffffffffffffffffffffffff1663ff3f754433856040518363ffffffff1660e01b8152600401611982929190614100565b600060405180830381600087803b15801561199c57600080fd5b505af11580156119b0573d6000803e3d6000fd5b505050506000600786815481106119ca576119c9614715565b5b90600052602060002090600502019050739a676e781a523b5d0c0e43731313a708cb60750873ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611abf57739a676e781a523b5d0c0e43731313a708cb60750873ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611aa257600080fd5b505af1158015611ab6573d6000803e3d6000fd5b50505050503494505b611acb86868585612d45565b505050505050565b611adb6124b8565b73ffffffffffffffffffffffffffffffffffffffff16611af96114d4565b73ffffffffffffffffffffffffffffffffffffffff1614611b4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4690614317565b60405180910390fd5b8115611b5e57611b5d610e68565b5b60006003544311611b7157600354611b73565b435b905083600254611b839190614484565b60028190555060076040518060a001604052808773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001838152602001600081526020018473ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611ced610786565b905060005b600182611cff9190614565565b8111611d2157611d0e81610b63565b8080611d199061466e565b915050611cf2565b5050565b60098060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60026000541415611d9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d94906143b7565b60405180910390fd5b6002600081905550611dad6124b8565b73ffffffffffffffffffffffffffffffffffffffff16611dcb6114d4565b73ffffffffffffffffffffffffffffffffffffffff1614611e21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1890614317565b60405180910390fd5b611e29610e68565b6014600c5443611e399190614565565b118015611e4857506000600d54115b15611e9e5764e8d4a5100064e25cf5cf78600960010154611e69919061450b565b611e7391906144da565b6009600101819055506001600d6000828254611e8f9190614565565b9250508190555043600c819055505b6001600081905550565b611eb06124b8565b73ffffffffffffffffffffffffffffffffffffffff16611ece6114d4565b73ffffffffffffffffffffffffffffffffffffffff1614611f24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1b90614317565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166342da4eb36040518163ffffffff1660e01b815260040160206040518083038186803b158015611f6c57600080fd5b505afa158015611f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa49190613d42565b14801561202e575060008173ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ff457600080fd5b505afa158015612008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202c9190613d42565b145b61206d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206490614337565b60405180910390fd5b60006007838154811061208357612082614715565b5b9060005260206000209060050201905060008160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561210457600080fd5b505afa158015612118573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213c9190613d42565b905060008273ffffffffffffffffffffffffffffffffffffffff166342da4eb36040518163ffffffff1660e01b815260040160206040518083038186803b15801561218657600080fd5b505afa15801561219a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121be9190613d42565b90508273ffffffffffffffffffffffffffffffffffffffff1663f3fef3a330836040518363ffffffff1660e01b81526004016121fb929190614100565b602060405180830381600087803b15801561221557600080fd5b505af1158015612229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224d9190613d42565b508360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86836040518363ffffffff1660e01b81526004016122ad929190614100565b602060405180830381600087803b1580156122c757600080fd5b505af11580156122db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ff9190613c81565b508473ffffffffffffffffffffffffffffffffffffffff166325baef538483856040518463ffffffff1660e01b815260040161233d9392919061417c565b600060405180830381600087803b15801561235757600080fd5b505af115801561236b573d6000803e3d6000fd5b50505050848460040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b60045481565b6123c86124b8565b73ffffffffffffffffffffffffffffffffffffffff166123e66114d4565b73ffffffffffffffffffffffffffffffffffffffff161461243c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243390614317565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156124ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a3906142b7565b60405180910390fd5b6124b581612c7f565b50565b600033905090565b6000600782815481106124d6576124d5614715565b5b9060005260206000209060050201905060006008600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160010154670de0b6b3a76400008460030154846000015461255e919061450b565b61256891906144da565b6125729190614565565b90506000811115612619576000600960000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506125b281338461344c565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e8460405161260f91906143d7565b60405180910390a3505b50505050565b61262882610cd0565b60006007838154811061263e5761263d614715565b5b9060005260206000209060050201905060006008600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600785815481106126b8576126b7614715565b5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342da4eb36040518163ffffffff1660e01b815260040160206040518083038186803b15801561272f57600080fd5b505afa158015612743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127679190613d42565b905060006007868154811061277f5761277e614715565b5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127f657600080fd5b505afa15801561280a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282e9190613d42565b90506000836000015411612877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286e906142f7565b60405180910390fd5b600081116128ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b190614297565b60405180910390fd5b6128c3866124c0565b6000818385600001546128d6919061450b565b6128e091906144da565b9050808611156128ee578095505b6000861115612bf85760006007888154811061290d5761290c614715565b5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a333896040518363ffffffff1660e01b8152600401612979929190614100565b602060405180830381600087803b15801561299357600080fd5b505af11580156129a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129cb9190613d42565b9050808560000160008282546129e19190614565565b9250508190555060008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612a479190614085565b60206040518083038186803b158015612a5f57600080fd5b505afa158015612a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a979190613d42565b905087811015612aa5578097505b6000881115612bf557612b198760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166127106004548c612b0a919061450b565b612b1491906144da565b613609565b612bf48760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338960000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612b9f9190614085565b60206040518083038186803b158015612bb757600080fd5b505afa158015612bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bef9190613d42565b613609565b5b50505b670de0b6b3a764000085600301548560000154612c15919061450b565b612c1f91906144da565b8460010181905550863373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56888604051612c6e91906143d7565b60405180910390a350505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612d4e84610cd0565b600060078581548110612d6457612d63614715565b5b9060005260206000209060050201905060006008600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541115612ddf57612dde866124c0565b5b60008511156132c957739a676e781a523b5d0c0e43731313a708cb60750873ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612ea557612ea43330878560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613739909392919063ffffffff16565b5b612f20735772ae803b430cb5d1260cc33aa2c8f89ad1d4886064602d88612ecc919061450b565b612ed691906144da565b8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166137c29092919063ffffffff16565b735772ae803b430cb5d1260cc33aa2c8f89ad1d48873ffffffffffffffffffffffffffffffffffffffff166372dd73fb868460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336040518463ffffffff1660e01b8152600401612f95939291906143f2565b600060405180830381600087803b158015612faf57600080fd5b505af1158015612fc3573d6000803e3d6000fd5b50505050613042735f950ee30b88ad46de2250c2d367397c4098281c6064600a88612fee919061450b565b612ff891906144da565b8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166137c29092919063ffffffff16565b735f950ee30b88ad46de2250c2d367397c4098281c73ffffffffffffffffffffffffffffffffffffffff1663637b62378360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166064600a896130a6919061450b565b6130b091906144da565b600960000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688886040518663ffffffff1660e01b81526004016130f8959493929190614129565b602060405180830381600087803b15801561311257600080fd5b505af1158015613126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314a9190613d42565b506064602d8661315a919061450b565b61316491906144da565b94506131d98260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166138489092919063ffffffff16565b6000600787815481106131ef576131ee614715565b5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166347e7ef2433886040518363ffffffff1660e01b815260040161325b929190614100565b602060405180830381600087803b15801561327557600080fd5b505af1158015613289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ad9190613d42565b90508082600001546132bf9190614484565b8260000181905550505b670de0b6b3a7640000826003015482600001546132e6919061450b565b6132f091906144da565b81600101819055506133f58260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016133a09190614085565b60206040518083038186803b1580156133b857600080fd5b505afa1580156133cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f09190613d42565b613609565b853373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158760405161343c91906143d7565b60405180910390a3505050505050565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016134879190614085565b60206040518083038186803b15801561349f57600080fd5b505afa1580156134b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d79190613d42565b905080821115613574578373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b815260040161351c929190614100565b602060405180830381600087803b15801561353657600080fd5b505af115801561354a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061356e9190613c81565b50613603565b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b81526004016135af929190614100565b602060405180830381600087803b1580156135c957600080fd5b505af11580156135dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136019190613c81565b505b50505050565b739a676e781a523b5d0c0e43731313a708cb60750873ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613708578273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040161368a91906143d7565b600060405180830381600087803b1580156136a457600080fd5b505af11580156136b8573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613702573d6000803e3d6000fd5b50613734565b61373382828573ffffffffffffffffffffffffffffffffffffffff166137c29092919063ffffffff16565b5b505050565b6137bc846323b872dd60e01b85858560405160240161375a939291906140c9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613969565b50505050565b6138438363a9059cbb60e01b84846040516024016137e1929190614100565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613969565b505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b81526004016138869291906140a0565b60206040518083038186803b15801561389e57600080fd5b505afa1580156138b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138d69190613d42565b6138e09190614484565b90506139638463095ea7b360e01b8584604051602401613901929190614100565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613969565b50505050565b60006139cb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613a309092919063ffffffff16565b9050600081511115613a2b57808060200190518101906139eb9190613c81565b613a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a2190614397565b60405180910390fd5b5b505050565b6060613a3f8484600085613a48565b90509392505050565b606082471015613a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a84906142d7565b60405180910390fd5b613a9685613b5c565b613ad5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613acc90614377565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613afe919061406e565b60006040518083038185875af1925050503d8060008114613b3b576040519150601f19603f3d011682016040523d82523d6000602084013e613b40565b606091505b5091509150613b50828286613b6f565b92505050949350505050565b600080823b905060008111915050919050565b60608315613b7f57829050613bcf565b600083511115613b925782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bc69190614275565b60405180910390fd5b9392505050565b600081359050613be5816149b2565b92915050565b600081359050613bfa816149c9565b92915050565b600081519050613c0f816149c9565b92915050565b600081359050613c24816149e0565b92915050565b600081359050613c39816149f7565b92915050565b600081519050613c4e816149f7565b92915050565b600060208284031215613c6a57613c69614744565b5b6000613c7884828501613bd6565b91505092915050565b600060208284031215613c9757613c96614744565b5b6000613ca584828501613c00565b91505092915050565b60008060008060808587031215613cc857613cc7614744565b5b6000613cd687828801613c15565b9450506020613ce787828801613c2a565b9350506040613cf887828801613beb565b9250506060613d0987828801613bd6565b91505092959194509250565b600060208284031215613d2b57613d2a614744565b5b6000613d3984828501613c2a565b91505092915050565b600060208284031215613d5857613d57614744565b5b6000613d6684828501613c3f565b91505092915050565b60008060408385031215613d8657613d85614744565b5b6000613d9485828601613c2a565b9250506020613da585828601613bd6565b9150509250929050565b60008060408385031215613dc657613dc5614744565b5b6000613dd485828601613c2a565b9250506020613de585828601613c2a565b9150509250929050565b600080600080600060a08688031215613e0b57613e0a614744565b5b6000613e1988828901613c2a565b9550506020613e2a88828901613c2a565b9450506040613e3b88828901613c2a565b9350506060613e4c88828901613c2a565b9250506080613e5d88828901613c2a565b9150509295509295909350565b613e7381614599565b82525050565b6000613e8482614452565b613e8e8185614468565b9350613e9e81856020860161463b565b80840191505092915050565b613eb3816145f3565b82525050565b613ec281614605565b82525050565b6000613ed38261445d565b613edd8185614473565b9350613eed81856020860161463b565b613ef681614749565b840191505092915050565b6000613f0e601f83614473565b9150613f198261475a565b602082019050919050565b6000613f31602683614473565b9150613f3c82614783565b604082019050919050565b6000613f54602683614473565b9150613f5f826147d2565b604082019050919050565b6000613f77601f83614473565b9150613f8282614821565b602082019050919050565b6000613f9a602083614473565b9150613fa58261484a565b602082019050919050565b6000613fbd602583614473565b9150613fc882614873565b604082019050919050565b6000613fe0602183614473565b9150613feb826148c2565b604082019050919050565b6000614003601d83614473565b915061400e82614911565b602082019050919050565b6000614026602a83614473565b91506140318261493a565b604082019050919050565b6000614049601f83614473565b915061405482614989565b602082019050919050565b614068816145e9565b82525050565b600061407a8284613e79565b915081905092915050565b600060208201905061409a6000830184613e6a565b92915050565b60006040820190506140b56000830185613e6a565b6140c26020830184613e6a565b9392505050565b60006060820190506140de6000830186613e6a565b6140eb6020830185613e6a565b6140f8604083018461405f565b949350505050565b60006040820190506141156000830185613e6a565b614122602083018461405f565b9392505050565b600060a08201905061413e6000830188613e6a565b61414b602083018761405f565b6141586040830186613e6a565b614165606083018561405f565b614172608083018461405f565b9695505050505050565b60006060820190506141916000830186613e6a565b61419e602083018561405f565b6141ab604083018461405f565b949350505050565b600060a0820190506141c86000830188613eaa565b6141d5602083018761405f565b6141e2604083018661405f565b6141ef606083018561405f565b6141fc6080830184613e6a565b9695505050505050565b600060e08201905061421b600083018a613eb9565b614228602083018961405f565b614235604083018861405f565b614242606083018761405f565b61424f608083018661405f565b61425c60a0830185613e6a565b61426960c083018461405f565b98975050505050505050565b6000602082019050818103600083015261428f8184613ec8565b905092915050565b600060208201905081810360008301526142b081613f01565b9050919050565b600060208201905081810360008301526142d081613f24565b9050919050565b600060208201905081810360008301526142f081613f47565b9050919050565b6000602082019050818103600083015261431081613f6a565b9050919050565b6000602082019050818103600083015261433081613f8d565b9050919050565b6000602082019050818103600083015261435081613fb0565b9050919050565b6000602082019050818103600083015261437081613fd3565b9050919050565b6000602082019050818103600083015261439081613ff6565b9050919050565b600060208201905081810360008301526143b081614019565b9050919050565b600060208201905081810360008301526143d08161403c565b9050919050565b60006020820190506143ec600083018461405f565b92915050565b6000606082019050614407600083018661405f565b6144146020830185613e6a565b6144216040830184613e6a565b949350505050565b600060408201905061443e600083018561405f565b61444b602083018461405f565b9392505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061448f826145e9565b915061449a836145e9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156144cf576144ce6146b7565b5b828201905092915050565b60006144e5826145e9565b91506144f0836145e9565b925082614500576144ff6146e6565b5b828204905092915050565b6000614516826145e9565b9150614521836145e9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561455a576145596146b7565b5b828202905092915050565b6000614570826145e9565b915061457b836145e9565b92508282101561458e5761458d6146b7565b5b828203905092915050565b60006145a4826145c9565b9050919050565b60008115159050919050565b60006145c282614599565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006145fe82614617565b9050919050565b6000614610826145e9565b9050919050565b600061462282614629565b9050919050565b6000614634826145c9565b9050919050565b60005b8381101561465957808201518184015260208101905061463e565b83811115614668576000848401525b50505050565b6000614679826145e9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156146ac576146ab6146b7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f47796d5661756c747342616e6b3a20736861726573546f74616c206973203000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f47796d5661756c747342616e6b3a20757365722e736861726573206973203000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f47796d5661756c747342616e6b3a204e6577207374726174656779206e6f742060008201527f656d707479000000000000000000000000000000000000000000000000000000602082015250565b7f47796d5661756c747342616e6b3a205374726174656779206e6f7420656d707460008201527f7900000000000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6149bb81614599565b81146149c657600080fd5b50565b6149d2816145ab565b81146149dd57600080fd5b50565b6149e9816145b7565b81146149f457600080fd5b50565b614a00816145e9565b8114614a0b57600080fd5b5056fea264697066735822122038155d349b740f4b9ea75d83e062979c048d8f4964e16d95e491a90ba480800264736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101fd5760003560e01c8063889dbba61161010d578063bf02b5ea116100a0578063d47039691161006f578063d4703969146106c6578063df27123a146106f2578063e0257d0314610709578063e941fa7814610732578063f2fde38b1461075d57610204565b8063bf02b5ea1461063f578063c09969df1461065b578063c5f956af14610684578063d1058e59146106af57610204565b8063a2dac829116100dc578063a2dac82914610597578063acdf4f18146105c2578063b001f618146105ed578063b6ac642a1461061657610204565b8063889dbba6146104d55780638da5cb5b146104f157806393f1a40b1461051c57806398969e821461055a57610204565b806348cd4cb111610190578063630b5ba11161015f578063630b5ba1146104165780636605bfda1461042d578063715018a6146104565780637b84daec1461046d5780637e5dbd8e146104aa57610204565b806348cd4cb11461036c5780634e3ad80f14610397578063516d1896146103c257806351eb05a6146103ed57610204565b80631ab06ee5116101cc5780631ab06ee5146102c6578063379607f5146102ef578063441a3e701461031857806345b08a961461034157610204565b8063081e3eda146102065780631155f81e146102315780631526fe271461025a57806317caf6f11461029b57610204565b3661020457005b005b34801561021257600080fd5b5061021b610786565b60405161022891906143d7565b60405180910390f35b34801561023d57600080fd5b5061025860048036038101906102539190613d6f565b610793565b005b34801561026657600080fd5b50610281600480360381019061027c9190613d15565b6109e1565b6040516102929594939291906141b3565b60405180910390f35b3480156102a757600080fd5b506102b0610a67565b6040516102bd91906143d7565b60405180910390f35b3480156102d257600080fd5b506102ed60048036038101906102e89190613daf565b610a6d565b005b3480156102fb57600080fd5b5061031660048036038101906103119190613d15565b610b63565b005b34801561032457600080fd5b5061033f600480360381019061033a9190613daf565b610c23565b005b34801561034d57600080fd5b50610356610c87565b6040516103639190614085565b60405180910390f35b34801561037857600080fd5b50610381610c9f565b60405161038e91906143d7565b60405180910390f35b3480156103a357600080fd5b506103ac610ca5565b6040516103b99190614085565b60405180910390f35b3480156103ce57600080fd5b506103d7610ccb565b6040516103e491906143d7565b60405180910390f35b3480156103f957600080fd5b50610414600480360381019061040f9190613d15565b610cd0565b005b34801561042257600080fd5b5061042b610e68565b005b34801561043957600080fd5b50610454600480360381019061044f9190613c54565b610e9b565b005b34801561046257600080fd5b5061046b610fb1565b005b34801561047957600080fd5b50610494600480360381019061048f9190613d6f565b611039565b6040516104a191906143d7565b60405180910390f35b3480156104b657600080fd5b506104bf61125f565b6040516104cc91906143d7565b60405180910390f35b6104ef60048036038101906104ea9190613def565b611264565b005b3480156104fd57600080fd5b506105066114d4565b6040516105139190614085565b60405180910390f35b34801561052857600080fd5b50610543600480360381019061053e9190613d6f565b6114fe565b604051610551929190614429565b60405180910390f35b34801561056657600080fd5b50610581600480360381019061057c9190613d6f565b61152f565b60405161058e91906143d7565b60405180910390f35b3480156105a357600080fd5b506105ac611724565b6040516105b991906143d7565b60405180910390f35b3480156105ce57600080fd5b506105d7611729565b6040516105e49190614085565b60405180910390f35b3480156105f957600080fd5b50610614600480360381019061060f9190613c54565b611741565b005b34801561062257600080fd5b5061063d60048036038101906106389190613d15565b611857565b005b61065960048036038101906106549190613def565b611933565b005b34801561066757600080fd5b50610682600480360381019061067d9190613cae565b611ad3565b005b34801561069057600080fd5b50610699611cbd565b6040516106a69190614085565b60405180910390f35b3480156106bb57600080fd5b506106c4611ce3565b005b3480156106d257600080fd5b506106db611d25565b6040516106e9929190614100565b60405180910390f35b3480156106fe57600080fd5b50610707611d57565b005b34801561071557600080fd5b50610730600480360381019061072b9190613d6f565b611ea8565b005b34801561073e57600080fd5b506107476123ba565b60405161075491906143d7565b60405180910390f35b34801561076957600080fd5b50610784600480360381019061077f9190613c54565b6123c0565b005b6000600780549050905090565b61079b6124b8565b73ffffffffffffffffffffffffffffffffffffffff166107b96114d4565b73ffffffffffffffffffffffffffffffffffffffff161461080f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080690614317565b60405180910390fd5b60006007838154811061082557610824614715565b5b9060005260206000209060050201905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082316007868154811061088b5761088a614715565b5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016108d99190614085565b60206040518083038186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190613d42565b1480610939575060008160030154145b610978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096f90614357565b60405180910390fd5b816007848154811061098d5761098c614715565b5b906000526020600020906005020160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600781815481106109f157600080fd5b90600052602060002090600502016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905085565b60025481565b610a756124b8565b73ffffffffffffffffffffffffffffffffffffffff16610a936114d4565b73ffffffffffffffffffffffffffffffffffffffff1614610ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae090614317565b60405180910390fd5b610af1610e68565b8060078381548110610b0657610b05614715565b5b906000526020600020906005020160010154600254610b259190614565565b610b2f9190614484565b6002819055508060078381548110610b4a57610b49614715565b5b9060005260206000209060050201600101819055505050565b610b6c81610cd0565b610b75816124c0565b600060078281548110610b8b57610b8a614715565b5b9060005260206000209060050201905060006008600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050670de0b6b3a764000082600301548260000154610c0c919061450b565b610c1691906144da565b8160010181905550505050565b60026000541415610c69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c60906143b7565b60405180910390fd5b6002600081905550610c7b828261261f565b60016000819055505050565b735772ae803b430cb5d1260cc33aa2c8f89ad1d48881565b60035481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b602d81565b600060078281548110610ce657610ce5614715565b5b9060005260206000209060050201905080600201544311610d075750610e65565b60008160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7357600080fd5b505afa158015610d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dab9190613d42565b90506000811415610dc6574382600201819055505050610e65565b6000826002015443610dd89190614565565b905060008111610dea57505050610e65565b60006009600101549050600060025485600101548385610e0a919061450b565b610e14919061450b565b610e1e91906144da565b905083670de0b6b3a764000082610e35919061450b565b610e3f91906144da565b8560030154610e4e9190614484565b856003018190555043856002018190555050505050505b50565b6000600780549050905060005b81811015610e9757610e8681610cd0565b80610e909061466e565b9050610e75565b5050565b60026000541415610ee1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed8906143b7565b60405180910390fd5b6002600081905550610ef16124b8565b73ffffffffffffffffffffffffffffffffffffffff16610f0f6114d4565b73ffffffffffffffffffffffffffffffffffffffff1614610f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5c90614317565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160008190555050565b610fb96124b8565b73ffffffffffffffffffffffffffffffffffffffff16610fd76114d4565b73ffffffffffffffffffffffffffffffffffffffff161461102d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102490614317565b60405180910390fd5b6110376000612c7f565b565b600080600784815481106110505761104f614715565b5b9060005260206000209060050201905060006008600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561112057600080fd5b505afa158015611134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111589190613d42565b90506000600787815481106111705761116f614715565b5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342da4eb36040518163ffffffff1660e01b815260040160206040518083038186803b1580156111e757600080fd5b505afa1580156111fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121f9190613d42565b90506000821415611237576000945050505050611259565b81818460000154611248919061450b565b61125291906144da565b9450505050505b92915050565b602d81565b60006007868154811061127a57611279614715565b5b9060005260206000209060050201905060006008600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506112e787610cd0565b60008160010154670de0b6b3a76400008460030154846000015461130b919061450b565b61131591906144da565b61131f9190614565565b9050600081111561149b57600960000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016113ac929190614100565b602060405180830381600087803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fe9190613c81565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663419bb796346000848b8b8b338c6040518963ffffffff1660e01b81526004016114689796959493929190614206565b6000604051808303818588803b15801561148157600080fd5b505af1158015611495573d6000803e3d6000fd5b50505050505b670de0b6b3a7640000836003015483600001546114b8919061450b565b6114c291906144da565b82600101819055505050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6008602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b6000806007848154811061154657611545614715565b5b9060005260206000209060050201905060006008600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008260030154905060008360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561161f57600080fd5b505afa158015611633573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116579190613d42565b905083600201544311801561166d575060008114155b156116e65760008460020154436116849190614565565b905060006002548660010154600960010154846116a1919061450b565b6116ab919061450b565b6116b591906144da565b905082670de0b6b3a7640000826116cc919061450b565b6116d691906144da565b846116e19190614484565b935050505b8260010154670de0b6b3a7640000838560000154611704919061450b565b61170e91906144da565b6117189190614565565b94505050505092915050565b600a81565b735f950ee30b88ad46de2250c2d367397c4098281c81565b60026000541415611787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177e906143b7565b60405180910390fd5b60026000819055506117976124b8565b73ffffffffffffffffffffffffffffffffffffffff166117b56114d4565b73ffffffffffffffffffffffffffffffffffffffff161461180b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180290614317565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160008190555050565b6002600054141561189d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611894906143b7565b60405180910390fd5b60026000819055506118ad6124b8565b73ffffffffffffffffffffffffffffffffffffffff166118cb6114d4565b73ffffffffffffffffffffffffffffffffffffffff1614611921576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191890614317565b60405180910390fd5b80600481905550600160008190555050565b735772ae803b430cb5d1260cc33aa2c8f89ad1d48873ffffffffffffffffffffffffffffffffffffffff1663ff3f754433856040518363ffffffff1660e01b8152600401611982929190614100565b600060405180830381600087803b15801561199c57600080fd5b505af11580156119b0573d6000803e3d6000fd5b505050506000600786815481106119ca576119c9614715565b5b90600052602060002090600502019050739a676e781a523b5d0c0e43731313a708cb60750873ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611abf57739a676e781a523b5d0c0e43731313a708cb60750873ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611aa257600080fd5b505af1158015611ab6573d6000803e3d6000fd5b50505050503494505b611acb86868585612d45565b505050505050565b611adb6124b8565b73ffffffffffffffffffffffffffffffffffffffff16611af96114d4565b73ffffffffffffffffffffffffffffffffffffffff1614611b4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4690614317565b60405180910390fd5b8115611b5e57611b5d610e68565b5b60006003544311611b7157600354611b73565b435b905083600254611b839190614484565b60028190555060076040518060a001604052808773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001838152602001600081526020018473ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611ced610786565b905060005b600182611cff9190614565565b8111611d2157611d0e81610b63565b8080611d199061466e565b915050611cf2565b5050565b60098060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60026000541415611d9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d94906143b7565b60405180910390fd5b6002600081905550611dad6124b8565b73ffffffffffffffffffffffffffffffffffffffff16611dcb6114d4565b73ffffffffffffffffffffffffffffffffffffffff1614611e21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1890614317565b60405180910390fd5b611e29610e68565b6014600c5443611e399190614565565b118015611e4857506000600d54115b15611e9e5764e8d4a5100064e25cf5cf78600960010154611e69919061450b565b611e7391906144da565b6009600101819055506001600d6000828254611e8f9190614565565b9250508190555043600c819055505b6001600081905550565b611eb06124b8565b73ffffffffffffffffffffffffffffffffffffffff16611ece6114d4565b73ffffffffffffffffffffffffffffffffffffffff1614611f24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1b90614317565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166342da4eb36040518163ffffffff1660e01b815260040160206040518083038186803b158015611f6c57600080fd5b505afa158015611f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa49190613d42565b14801561202e575060008173ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ff457600080fd5b505afa158015612008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202c9190613d42565b145b61206d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206490614337565b60405180910390fd5b60006007838154811061208357612082614715565b5b9060005260206000209060050201905060008160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561210457600080fd5b505afa158015612118573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213c9190613d42565b905060008273ffffffffffffffffffffffffffffffffffffffff166342da4eb36040518163ffffffff1660e01b815260040160206040518083038186803b15801561218657600080fd5b505afa15801561219a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121be9190613d42565b90508273ffffffffffffffffffffffffffffffffffffffff1663f3fef3a330836040518363ffffffff1660e01b81526004016121fb929190614100565b602060405180830381600087803b15801561221557600080fd5b505af1158015612229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224d9190613d42565b508360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86836040518363ffffffff1660e01b81526004016122ad929190614100565b602060405180830381600087803b1580156122c757600080fd5b505af11580156122db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ff9190613c81565b508473ffffffffffffffffffffffffffffffffffffffff166325baef538483856040518463ffffffff1660e01b815260040161233d9392919061417c565b600060405180830381600087803b15801561235757600080fd5b505af115801561236b573d6000803e3d6000fd5b50505050848460040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b60045481565b6123c86124b8565b73ffffffffffffffffffffffffffffffffffffffff166123e66114d4565b73ffffffffffffffffffffffffffffffffffffffff161461243c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243390614317565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156124ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a3906142b7565b60405180910390fd5b6124b581612c7f565b50565b600033905090565b6000600782815481106124d6576124d5614715565b5b9060005260206000209060050201905060006008600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160010154670de0b6b3a76400008460030154846000015461255e919061450b565b61256891906144da565b6125729190614565565b90506000811115612619576000600960000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506125b281338461344c565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e8460405161260f91906143d7565b60405180910390a3505b50505050565b61262882610cd0565b60006007838154811061263e5761263d614715565b5b9060005260206000209060050201905060006008600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600785815481106126b8576126b7614715565b5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342da4eb36040518163ffffffff1660e01b815260040160206040518083038186803b15801561272f57600080fd5b505afa158015612743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127679190613d42565b905060006007868154811061277f5761277e614715565b5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127f657600080fd5b505afa15801561280a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282e9190613d42565b90506000836000015411612877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286e906142f7565b60405180910390fd5b600081116128ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b190614297565b60405180910390fd5b6128c3866124c0565b6000818385600001546128d6919061450b565b6128e091906144da565b9050808611156128ee578095505b6000861115612bf85760006007888154811061290d5761290c614715565b5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a333896040518363ffffffff1660e01b8152600401612979929190614100565b602060405180830381600087803b15801561299357600080fd5b505af11580156129a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129cb9190613d42565b9050808560000160008282546129e19190614565565b9250508190555060008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612a479190614085565b60206040518083038186803b158015612a5f57600080fd5b505afa158015612a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a979190613d42565b905087811015612aa5578097505b6000881115612bf557612b198760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166127106004548c612b0a919061450b565b612b1491906144da565b613609565b612bf48760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338960000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612b9f9190614085565b60206040518083038186803b158015612bb757600080fd5b505afa158015612bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bef9190613d42565b613609565b5b50505b670de0b6b3a764000085600301548560000154612c15919061450b565b612c1f91906144da565b8460010181905550863373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56888604051612c6e91906143d7565b60405180910390a350505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612d4e84610cd0565b600060078581548110612d6457612d63614715565b5b9060005260206000209060050201905060006008600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541115612ddf57612dde866124c0565b5b60008511156132c957739a676e781a523b5d0c0e43731313a708cb60750873ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612ea557612ea43330878560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613739909392919063ffffffff16565b5b612f20735772ae803b430cb5d1260cc33aa2c8f89ad1d4886064602d88612ecc919061450b565b612ed691906144da565b8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166137c29092919063ffffffff16565b735772ae803b430cb5d1260cc33aa2c8f89ad1d48873ffffffffffffffffffffffffffffffffffffffff166372dd73fb868460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336040518463ffffffff1660e01b8152600401612f95939291906143f2565b600060405180830381600087803b158015612faf57600080fd5b505af1158015612fc3573d6000803e3d6000fd5b50505050613042735f950ee30b88ad46de2250c2d367397c4098281c6064600a88612fee919061450b565b612ff891906144da565b8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166137c29092919063ffffffff16565b735f950ee30b88ad46de2250c2d367397c4098281c73ffffffffffffffffffffffffffffffffffffffff1663637b62378360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166064600a896130a6919061450b565b6130b091906144da565b600960000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688886040518663ffffffff1660e01b81526004016130f8959493929190614129565b602060405180830381600087803b15801561311257600080fd5b505af1158015613126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314a9190613d42565b506064602d8661315a919061450b565b61316491906144da565b94506131d98260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166138489092919063ffffffff16565b6000600787815481106131ef576131ee614715565b5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166347e7ef2433886040518363ffffffff1660e01b815260040161325b929190614100565b602060405180830381600087803b15801561327557600080fd5b505af1158015613289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ad9190613d42565b90508082600001546132bf9190614484565b8260000181905550505b670de0b6b3a7640000826003015482600001546132e6919061450b565b6132f091906144da565b81600101819055506133f58260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016133a09190614085565b60206040518083038186803b1580156133b857600080fd5b505afa1580156133cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f09190613d42565b613609565b853373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158760405161343c91906143d7565b60405180910390a3505050505050565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016134879190614085565b60206040518083038186803b15801561349f57600080fd5b505afa1580156134b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d79190613d42565b905080821115613574578373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b815260040161351c929190614100565b602060405180830381600087803b15801561353657600080fd5b505af115801561354a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061356e9190613c81565b50613603565b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b81526004016135af929190614100565b602060405180830381600087803b1580156135c957600080fd5b505af11580156135dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136019190613c81565b505b50505050565b739a676e781a523b5d0c0e43731313a708cb60750873ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613708578273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040161368a91906143d7565b600060405180830381600087803b1580156136a457600080fd5b505af11580156136b8573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613702573d6000803e3d6000fd5b50613734565b61373382828573ffffffffffffffffffffffffffffffffffffffff166137c29092919063ffffffff16565b5b505050565b6137bc846323b872dd60e01b85858560405160240161375a939291906140c9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613969565b50505050565b6138438363a9059cbb60e01b84846040516024016137e1929190614100565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613969565b505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b81526004016138869291906140a0565b60206040518083038186803b15801561389e57600080fd5b505afa1580156138b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138d69190613d42565b6138e09190614484565b90506139638463095ea7b360e01b8584604051602401613901929190614100565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613969565b50505050565b60006139cb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613a309092919063ffffffff16565b9050600081511115613a2b57808060200190518101906139eb9190613c81565b613a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a2190614397565b60405180910390fd5b5b505050565b6060613a3f8484600085613a48565b90509392505050565b606082471015613a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a84906142d7565b60405180910390fd5b613a9685613b5c565b613ad5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613acc90614377565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613afe919061406e565b60006040518083038185875af1925050503d8060008114613b3b576040519150601f19603f3d011682016040523d82523d6000602084013e613b40565b606091505b5091509150613b50828286613b6f565b92505050949350505050565b600080823b905060008111915050919050565b60608315613b7f57829050613bcf565b600083511115613b925782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bc69190614275565b60405180910390fd5b9392505050565b600081359050613be5816149b2565b92915050565b600081359050613bfa816149c9565b92915050565b600081519050613c0f816149c9565b92915050565b600081359050613c24816149e0565b92915050565b600081359050613c39816149f7565b92915050565b600081519050613c4e816149f7565b92915050565b600060208284031215613c6a57613c69614744565b5b6000613c7884828501613bd6565b91505092915050565b600060208284031215613c9757613c96614744565b5b6000613ca584828501613c00565b91505092915050565b60008060008060808587031215613cc857613cc7614744565b5b6000613cd687828801613c15565b9450506020613ce787828801613c2a565b9350506040613cf887828801613beb565b9250506060613d0987828801613bd6565b91505092959194509250565b600060208284031215613d2b57613d2a614744565b5b6000613d3984828501613c2a565b91505092915050565b600060208284031215613d5857613d57614744565b5b6000613d6684828501613c3f565b91505092915050565b60008060408385031215613d8657613d85614744565b5b6000613d9485828601613c2a565b9250506020613da585828601613bd6565b9150509250929050565b60008060408385031215613dc657613dc5614744565b5b6000613dd485828601613c2a565b9250506020613de585828601613c2a565b9150509250929050565b600080600080600060a08688031215613e0b57613e0a614744565b5b6000613e1988828901613c2a565b9550506020613e2a88828901613c2a565b9450506040613e3b88828901613c2a565b9350506060613e4c88828901613c2a565b9250506080613e5d88828901613c2a565b9150509295509295909350565b613e7381614599565b82525050565b6000613e8482614452565b613e8e8185614468565b9350613e9e81856020860161463b565b80840191505092915050565b613eb3816145f3565b82525050565b613ec281614605565b82525050565b6000613ed38261445d565b613edd8185614473565b9350613eed81856020860161463b565b613ef681614749565b840191505092915050565b6000613f0e601f83614473565b9150613f198261475a565b602082019050919050565b6000613f31602683614473565b9150613f3c82614783565b604082019050919050565b6000613f54602683614473565b9150613f5f826147d2565b604082019050919050565b6000613f77601f83614473565b9150613f8282614821565b602082019050919050565b6000613f9a602083614473565b9150613fa58261484a565b602082019050919050565b6000613fbd602583614473565b9150613fc882614873565b604082019050919050565b6000613fe0602183614473565b9150613feb826148c2565b604082019050919050565b6000614003601d83614473565b915061400e82614911565b602082019050919050565b6000614026602a83614473565b91506140318261493a565b604082019050919050565b6000614049601f83614473565b915061405482614989565b602082019050919050565b614068816145e9565b82525050565b600061407a8284613e79565b915081905092915050565b600060208201905061409a6000830184613e6a565b92915050565b60006040820190506140b56000830185613e6a565b6140c26020830184613e6a565b9392505050565b60006060820190506140de6000830186613e6a565b6140eb6020830185613e6a565b6140f8604083018461405f565b949350505050565b60006040820190506141156000830185613e6a565b614122602083018461405f565b9392505050565b600060a08201905061413e6000830188613e6a565b61414b602083018761405f565b6141586040830186613e6a565b614165606083018561405f565b614172608083018461405f565b9695505050505050565b60006060820190506141916000830186613e6a565b61419e602083018561405f565b6141ab604083018461405f565b949350505050565b600060a0820190506141c86000830188613eaa565b6141d5602083018761405f565b6141e2604083018661405f565b6141ef606083018561405f565b6141fc6080830184613e6a565b9695505050505050565b600060e08201905061421b600083018a613eb9565b614228602083018961405f565b614235604083018861405f565b614242606083018761405f565b61424f608083018661405f565b61425c60a0830185613e6a565b61426960c083018461405f565b98975050505050505050565b6000602082019050818103600083015261428f8184613ec8565b905092915050565b600060208201905081810360008301526142b081613f01565b9050919050565b600060208201905081810360008301526142d081613f24565b9050919050565b600060208201905081810360008301526142f081613f47565b9050919050565b6000602082019050818103600083015261431081613f6a565b9050919050565b6000602082019050818103600083015261433081613f8d565b9050919050565b6000602082019050818103600083015261435081613fb0565b9050919050565b6000602082019050818103600083015261437081613fd3565b9050919050565b6000602082019050818103600083015261439081613ff6565b9050919050565b600060208201905081810360008301526143b081614019565b9050919050565b600060208201905081810360008301526143d08161403c565b9050919050565b60006020820190506143ec600083018461405f565b92915050565b6000606082019050614407600083018661405f565b6144146020830185613e6a565b6144216040830184613e6a565b949350505050565b600060408201905061443e600083018561405f565b61444b602083018461405f565b9392505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061448f826145e9565b915061449a836145e9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156144cf576144ce6146b7565b5b828201905092915050565b60006144e5826145e9565b91506144f0836145e9565b925082614500576144ff6146e6565b5b828204905092915050565b6000614516826145e9565b9150614521836145e9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561455a576145596146b7565b5b828202905092915050565b6000614570826145e9565b915061457b836145e9565b92508282101561458e5761458d6146b7565b5b828203905092915050565b60006145a4826145c9565b9050919050565b60008115159050919050565b60006145c282614599565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006145fe82614617565b9050919050565b6000614610826145e9565b9050919050565b600061462282614629565b9050919050565b6000614634826145c9565b9050919050565b60005b8381101561465957808201518184015260208101905061463e565b83811115614668576000848401525b50505050565b6000614679826145e9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156146ac576146ab6146b7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f47796d5661756c747342616e6b3a20736861726573546f74616c206973203000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f47796d5661756c747342616e6b3a20757365722e736861726573206973203000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f47796d5661756c747342616e6b3a204e6577207374726174656779206e6f742060008201527f656d707479000000000000000000000000000000000000000000000000000000602082015250565b7f47796d5661756c747342616e6b3a205374726174656779206e6f7420656d707460008201527f7900000000000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6149bb81614599565b81146149c657600080fd5b50565b6149d2816145ab565b81146149dd57600080fd5b50565b6149e9816145b7565b81146149f457600080fd5b50565b614a00816145e9565b8114614a0b57600080fd5b5056fea264697066735822122038155d349b740f4b9ea75d83e062979c048d8f4964e16d95e491a90ba480800264736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add(address,uint256,bool,address)": {
        "params": {
          "_allocPoint": ": AllocPoint for new pool",
          "_strategy": ": Address of Strategy contract",
          "_want": ": Address of want token contract",
          "_withUpdate": ": If true will call massUpdatePools function"
        }
      },
      "claim(uint256)": {
        "params": {
          "_pid": "pool Id"
        }
      },
      "claimAndDeposit(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_pid": ": pool Id"
        }
      },
      "deposit(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_pid": ": Pool id",
          "_referrerId": ": Referrer address",
          "_wantAmt": ": Amount of want token that user wants to deposit"
        }
      },
      "migrateStrategy(uint256,address)": {
        "params": {
          "_newStrategy": ": New strategy contract address for pool",
          "_pid": ": Pool id that will be updated"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingReward(uint256,address)": {
        "params": {
          "_pid": ": Pool id where user has assets",
          "_user": ": Users address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "resetStrategy(uint256,address)": {
        "params": {
          "_pid": ": Pool id that will be updated",
          "_strategy": ": New strategy contract address for pool"
        }
      },
      "set(uint256,uint256)": {
        "params": {
          "_allocPoint": ": New allocPoint for pool",
          "_pid": ": Pool id that will be updated"
        }
      },
      "setFarmingAddress(address)": {
        "params": {
          "_farmingAddress": "Address of treasury address"
        }
      },
      "setTreasuryAddress(address)": {
        "params": {
          "_treasuryAddress": "Address of treasury address"
        }
      },
      "setWithdrawFee(uint256)": {
        "params": {
          "_fee": "100 = 1%"
        }
      },
      "stakedWantTokens(uint256,address)": {
        "params": {
          "_pid": ": Pool id where user has assets",
          "_user": ": Users address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePool(uint256)": {
        "params": {
          "_pid": ": Pool id that will be updated"
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "_pid": ": Pool id",
          "_wantAmt": ": Amount of want token that user wants to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BUY_AND_BURN_GYM()": {
        "notice": "Percent of amount that will be sent to buyBack contract"
      },
      "RELATIONSHIP_REWARD()": {
        "notice": "Percent of amount that will be sent to relationship contract"
      },
      "VAULTS_SAVING()": {
        "notice": "Percent of amount that will be sent to vault contract"
      },
      "add(address,uint256,bool,address)": {
        "notice": "Function to Add pool"
      },
      "claim(uint256)": {
        "notice": "Claim users rewards from given pool"
      },
      "claimAll()": {
        "notice": "Claim users rewards from all pools"
      },
      "claimAndDeposit(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Claim users rewards and add deposit in Farming contract"
      },
      "deposit(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Deposit in given pool"
      },
      "massUpdatePools()": {
        "notice": "Update reward variables for all pools. Be careful of gas spending!"
      },
      "migrateStrategy(uint256,address)": {
        "notice": "Migrates all assets to new strategy. Can only be called by the owner"
      },
      "pendingReward(uint256,address)": {
        "notice": "View function to see pending reward on frontend."
      },
      "poolInfo(uint256)": {
        "notice": "Info of each pool."
      },
      "resetStrategy(uint256,address)": {
        "notice": "Update the given pool's strategy. Can only be called by the owner"
      },
      "rewardPoolInfo()": {
        "notice": "Info of reward pool"
      },
      "set(uint256,uint256)": {
        "notice": "Update the given pool's reward allocation point. Can only be called by the owner"
      },
      "setFarmingAddress(address)": {
        "notice": "Function to set Farming address"
      },
      "setTreasuryAddress(address)": {
        "notice": "Function to set Treasury address"
      },
      "setWithdrawFee(uint256)": {
        "notice": "Function to set withdraw fee"
      },
      "stakedWantTokens(uint256,address)": {
        "notice": "View function to see staked Want tokens on frontend."
      },
      "startBlock()": {
        "notice": "Startblock number"
      },
      "totalAllocPoint()": {
        "notice": "Total allocation points. Must be the sum of all allocation points in all pools."
      },
      "treasuryAddress()": {
        "notice": "Treasury address where will be sent all unused assets"
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables of the given pool to be up-to-date."
      },
      "updateRewardPerBlock()": {
        "notice": "Updates amount of reward tokens  per block that user will get. Can only be called by the owner"
      },
      "userInfo(uint256,address)": {
        "notice": "Info of each user that stakes want tokens."
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw user`s assets from pool"
      }
    },
    "notice": "GymVaultsBank contract: - Users can:   # Deposit token   # Deposit BNB   # Withdraw assets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 206,
        "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3222,
        "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3225,
        "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
        "label": "startBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3227,
        "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
        "label": "withdrawFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3232,
        "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
        "label": "farming",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3238,
        "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3243,
        "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
        "label": "poolInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(PoolInfo)3202_storage)dyn_storage"
      },
      {
        "astId": 3251,
        "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
        "label": "userInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3190_storage))"
      },
      {
        "astId": 3255,
        "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
        "label": "rewardPoolInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(RewardPoolInfo)3207_storage"
      },
      {
        "astId": 3258,
        "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
        "label": "alpacaToWBNB",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3260,
        "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
        "label": "lastChangeBlock",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3262,
        "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
        "label": "rewardPerBlockChangesCount",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)3202_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)3202_storage",
        "encoding": "dynamic_array",
        "label": "struct GymVaultsBank.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)313": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)3190_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GymVaultsBank.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)3190_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3190_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct GymVaultsBank.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)3190_storage)"
      },
      "t_struct(PoolInfo)3202_storage": {
        "encoding": "inplace",
        "label": "struct GymVaultsBank.PoolInfo",
        "members": [
          {
            "astId": 3193,
            "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
            "label": "want",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)313"
          },
          {
            "astId": 3195,
            "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3197,
            "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3199,
            "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3201,
            "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
            "label": "strategy",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RewardPoolInfo)3207_storage": {
        "encoding": "inplace",
        "label": "struct GymVaultsBank.RewardPoolInfo",
        "members": [
          {
            "astId": 3204,
            "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
            "label": "rewardToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3206,
            "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
            "label": "rewardPerBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)3190_storage": {
        "encoding": "inplace",
        "label": "struct GymVaultsBank.UserInfo",
        "members": [
          {
            "astId": 3187,
            "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3189,
            "contract": "cache/solpp-generated-contracts/GymVaultsBank.sol:GymVaultsBank",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}