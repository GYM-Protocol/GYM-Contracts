{
  "language": "Solidity",
  "sources": {
    "cache/solpp-generated-contracts/BuyBack.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IERC20Burnable.sol\";\nimport \"./interfaces/IPancakeRouter02.sol\";\nimport \"hardhat/console.sol\";\n\n/**\n * @notice BuyBack contract:\n *   Swaps want token to reward token and burns them.\n */\ncontract BuyBack {\n    using SafeERC20 for IERC20;\n\n    address[] private _path;\n\n    /**\n     * @notice Function to buy and burn Gym reward token\n     * @param _wantAdd: Want token address\n     * @param _wantAmt: Amount of want token for swap\n     * @param _rewardToken: Address of reward token\n     */\n    function buyAndBurnToken(\n        address _wantAdd,\n        uint256 _wantAmt,\n        address _rewardToken,\n        uint256 _minBurnAmt,\n        uint256 _deadline\n    ) public returns (uint256) {\n        if (_wantAdd != _rewardToken) {\n            uint256 burnAmt = IERC20(_rewardToken).balanceOf(address(this));\n            IERC20(_wantAdd).safeIncreaseAllowance(0x367633909278A3C91f4cB130D8e56382F00D1071, _wantAmt);\n            _path = [_wantAdd, _rewardToken];\n\n            IPancakeRouter02(0x367633909278A3C91f4cB130D8e56382F00D1071).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                _wantAmt,\n                _minBurnAmt,\n                _path,\n                address(this),\n                _deadline\n            );\n\n            burnAmt = IERC20(_rewardToken).balanceOf(address(this)) - burnAmt;\n            IERC20Burnable(_rewardToken).burn(burnAmt);\n\n            return burnAmt;\n        }\n\n        IERC20Burnable(_rewardToken).burn(_wantAmt);\n\n        return _wantAmt;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "cache/solpp-generated-contracts/interfaces/IERC20Burnable.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20Burnable is IERC20 {\n    function burn(uint256 _amount) external;\n\n    function burnFrom(address _account, uint256 _amount) external;\n}\n"
    },
    "cache/solpp-generated-contracts/interfaces/IPancakeRouter02.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport \"./IPancakeRouter01.sol\";\n\ninterface IPancakeRouter02 is IPancakeRouter01 {\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "cache/solpp-generated-contracts/interfaces/IPancakeRouter01.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\n\ninterface IPancakeRouter01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "cache/solpp-generated-contracts/GymVaultsStrategyAlpaca.sol": {
      "content": "pragma solidity 0.8.7;\n\n\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./interfaces/IPancakeRouter01.sol\";\nimport \"./interfaces/IPancakeRouter02.sol\";\nimport \"./interfaces/IAlpacaToken.sol\";\nimport \"./interfaces/IVaultConfig.sol\";\nimport \"./interfaces/IVault.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"hardhat/console.sol\";\n\ninterface IFarm {\n    function userInfo(uint256 _pid, address _user)\n        external\n        view\n        returns (\n            uint256 amount,\n            uint256 rewardDebt,\n            uint256 bonusDebt,\n            uint256 fundedBy\n        );\n}\n\ninterface ITreasury {\n    function notifyExternalReward(uint256 _amount) external;\n}\n\ninterface IFairLaunch {\n    function pendingAlpaca(uint256 _pid, address _user) external view returns (uint256);\n\n    function deposit(\n        address _for,\n        uint256 _pid,\n        uint256 _amount\n    ) external;\n\n    function withdraw(\n        address _for,\n        uint256 _pid,\n        uint256 _amount\n    ) external;\n\n    function withdrawAll(address _for, uint256 _pid) external;\n\n    function harvest(uint256 _pid) external;\n}\n\n// SPDX-License-Identifier: MIT\ncontract GymVaultsStrategyAlpaca is Ownable, ReentrancyGuard, Pausable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /// This vault is purely for staking\n    bool public isAutoComp;\n    bool public strategyStopped;\n    bool public checkForUnlockReward;\n\n    /// address of vault.\n    address public vaultContractAddress;\n    /// address of farm\n    address public farmContractAddress;\n    /// pid of pool in farmContractAddress\n    uint256 public pid;\n    /// address of want token contract\n    address public wantAddress;\n    /// address of earn token contract\n    address public earnedAddress;\n    /// PancakeSwap: Router address\n    address public uniRouterAddress = address(0x367633909278A3C91f4cB130D8e56382F00D1071);\n    /// WBNB address\n    address public constant wbnbAddress = address(0xDfb1211E2694193df5765d54350e1145FD2404A1);\n    /// BUSD address\n    address public constant busdAddress = address(0x0266693F9Df932aD7dA8a9b44C2129Ce8a87E81f);\n\n    address public operator;\n    address public strategist;\n    /// allow public to call earn() function\n    bool public notPublic = false;\n\n    uint256 public lastEarnBlock;\n    uint256 public wantLockedTotal;\n    uint256 public sharesTotal;\n\n    uint256 public controllerFee = 0;\n    /// 100 = 1%\n    uint256 public constant controllerFeeMax = 10000;\n    uint256 public constant controllerFeeUL = 300;\n    /// 0% entrance fee (goes to pool + prevents front-running)\n    uint256 public entranceFeeFactor = 10000;\n    /// 100 = 1%\n    uint256 public constant entranceFeeFactorMax = 10000;\n    /// 0.5% is the max entrance fee settable. LL = lowerlimit\n    uint256 public constant entranceFeeFactorLL = 9950;\n\n    address[] public earnedToWantPath;\n    address[] public earnedToBusdPath;\n    address[] public wantToEarnedPath;\n\n    event Deposit(uint256 amount);\n    event Withdraw(uint256 amount);\n    event Farm(uint256 amount);\n    event Compound(address token0Address, uint256 token0Amt, address token1Address, uint256 token1Amt);\n    event Earned(address earnedAddress, uint256 earnedAmt);\n    event BuyBack(address earnedAddress, address buyBackToken, uint256 earnedAmt, uint256 buyBackAmt, address receiver);\n    event DistributeFee(address earnedAddress, uint256 fee, address receiver);\n    event ConvertDustToEarned(address tokenAddress, address earnedAddress, uint256 tokenAmt);\n    event InCaseTokensGetStuck(address tokenAddress, uint256 tokenAmt, address receiver);\n    event ExecuteTransaction(address indexed target, uint256 value, string signature, bytes data);\n\n    // _controller:  BvaultsBank\n    // _buyBackToken1Info[]: buyBackToken1, buyBackAddress1, buyBackToken1MidRouteAddress\n    // _buyBackToken2Info[]: buyBackToken2, buyBackAddress2, buyBackToken2MidRouteAddress\n    // _token0Info[]: token0Address, token0MidRouteAddress\n    // _token1Info[]: token1Address, token1MidRouteAddress\n    constructor(\n        address _controller,\n        bool _isAutoComp,\n        address _vaultContractAddress,\n        address _farmContractAddress,\n        uint256 _pid,\n        address _wantAddress,\n        address _earnedAddress,\n        address _uniRouterAddress // address[] memory _token0Info, // address[] memory _token1Info\n    ) {\n        operator = msg.sender;\n        strategist = msg.sender;\n        // to call earn if public not allowed\n\n        isAutoComp = _isAutoComp;\n        wantAddress = _wantAddress;\n\n        if (_uniRouterAddress != address(0)) uniRouterAddress = _uniRouterAddress;\n\n        if (isAutoComp) {\n            vaultContractAddress = _vaultContractAddress;\n            farmContractAddress = _farmContractAddress;\n            pid = _pid;\n            earnedAddress = _earnedAddress;\n            uniRouterAddress = _uniRouterAddress;\n\n            earnedToBusdPath = [earnedAddress, busdAddress];\n            earnedToWantPath = [earnedAddress, _wantAddress];\n            wantToEarnedPath = [_wantAddress, earnedAddress];\n        }\n\n        transferOwnership(_controller);\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n\n    modifier onlyOperator() {\n        require(operator == msg.sender, \"GymVaultsStrategyAlpaca: caller is not the operator\");\n        _;\n    }\n\n    modifier onlyStrategist() {\n        require(\n            strategist == msg.sender || operator == msg.sender,\n            \"GymVaultsStrategyAlpaca: caller is not the strategist\"\n        );\n        _;\n    }\n\n    modifier strategyRunning() {\n        require(!strategyStopped, \"GymVaultsStrategyAlpaca: strategy is not running\");\n        _;\n    }\n\n    function pause() external onlyOperator {\n        _pause();\n    }\n\n    function unpause() external onlyOperator {\n        _unpause();\n    }\n\n    function setOperator(address _operator) external onlyOperator {\n        operator = _operator;\n    }\n\n    function setStrategist(address _strategist) external onlyOperator {\n        strategist = _strategist;\n    }\n\n    /**\n     * @notice  Function to set entrance fee\n     * @param _entranceFeeFactor 100 = 1%\n     */\n    function setEntranceFeeFactor(uint256 _entranceFeeFactor) external onlyOperator {\n        require(_entranceFeeFactor > entranceFeeFactorLL, \"GymVaultsStrategyAlpaca: !safe - too low\");\n        require(_entranceFeeFactor <= entranceFeeFactorMax, \"GymVaultsStrategyAlpaca: !safe - too high\");\n        entranceFeeFactor = _entranceFeeFactor;\n    }\n\n    /**\n     * @notice  Function to set controller fee\n     * @param _controllerFee 100 = 1%\n     */\n    function setControllerFee(uint256 _controllerFee) external onlyOperator {\n        require(_controllerFee <= controllerFeeUL, \"GymVaultsStrategyAlpaca: too high\");\n        controllerFee = _controllerFee;\n    }\n\n    function setNotPublic(bool _notPublic) external onlyOperator {\n        notPublic = _notPublic;\n    }\n\n    function setCheckForUnlockReward(bool _checkForUnlockReward) external onlyOperator {\n        checkForUnlockReward = _checkForUnlockReward;\n    }\n\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) external onlyOperator {\n        require(_token != earnedAddress, \"!safe\");\n        require(_token != wantAddress, \"!safe\");\n        IERC20(_token).safeTransfer(_to, _amount);\n        emit InCaseTokensGetStuck(_token, _amount, _to);\n    }\n\n    function emergencyWithraw() external onlyOperator {\n        (uint256 _wantAmt, , , ) = IFarm(farmContractAddress).userInfo(pid, address(this));\n        IFairLaunch(farmContractAddress).withdraw(address(this), pid, _wantAmt);\n        IVault(vaultContractAddress).withdraw(_wantAmt);\n        strategyStopped = true;\n    }\n\n    function resumeStrategy() external onlyOperator {\n        strategyStopped = false;\n        farm();\n    }\n\n    /**\n     * @notice  Function checks if user Autorised or not\n     * @param _account Users address\n     */\n    function isAuthorised(address _account) public view returns (bool) {\n        return (_account == operator) || (msg.sender == strategist);\n    }\n\n    /**\n     * @notice  Adds deposit\n     * @param _wantAmt Amount of want tokens that will be added to pool\n     */\n    function deposit(address, uint256 _wantAmt) public onlyOwner whenNotPaused strategyRunning returns (uint256) {\n        IERC20(wantAddress).safeTransferFrom(address(msg.sender), address(this), _wantAmt);\n        uint256 sharesAdded = _wantAmt;\n        if (wantLockedTotal > 0) {\n            sharesAdded = (_wantAmt * sharesTotal * entranceFeeFactor) / wantLockedTotal / entranceFeeFactorMax;\n        }\n        sharesTotal = sharesTotal + sharesAdded;\n\n        if (isAutoComp) {\n            _farm();\n        } else {\n            wantLockedTotal = wantLockedTotal + _wantAmt;\n        }\n\n        emit Deposit(_wantAmt);\n\n        return sharesAdded;\n    }\n\n    function farm() public nonReentrant strategyRunning {\n        _farm();\n    }\n\n    /**\n     * @notice  Function to withdraw assets\n     * @param _wantAmt Amount of want tokens that will be withdrawn\n     */\n    function withdraw(address, uint256 _wantAmt) public onlyOwner nonReentrant returns (uint256) {\n        require(_wantAmt > 0, \"GymVaultsStrategyAlpaca: !_wantAmt\");\n        IVault vault = IVault(vaultContractAddress);\n        uint256 ibAmount = (_wantAmt * vault.totalSupply()) / vault.totalToken();\n        if (isAutoComp && !strategyStopped) {\n            IFairLaunch(farmContractAddress).withdraw(address(this), pid, ibAmount);\n            vault.withdraw(ibAmount);\n            if (\n                vault.token() == IVaultConfig(0x037F4b0d074B83d075EC3B955F69BaB9977bdb05).getWrappedNativeAddr()\n                // address(this).balance > 0\n            ) {\n                IWETH(0xDfb1211E2694193df5765d54350e1145FD2404A1).deposit{value: _wantAmt}();\n            }\n        }\n\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\n        if (_wantAmt > wantAmt) {\n            _wantAmt = wantAmt;\n        }\n\n        if (wantLockedTotal < _wantAmt) {\n            _wantAmt = wantLockedTotal;\n        }\n\n        uint256 sharesRemoved = (_wantAmt * sharesTotal) / wantLockedTotal;\n        if (sharesRemoved > sharesTotal) {\n            sharesRemoved = sharesTotal;\n        }\n        sharesTotal = sharesTotal - sharesRemoved;\n        wantLockedTotal = wantLockedTotal - _wantAmt;\n\n        IERC20(wantAddress).safeTransfer(address(msg.sender), _wantAmt);\n        emit Withdraw(_wantAmt);\n\n        return sharesRemoved;\n    }\n\n    /**\n     *  1. Harvest farm tokens\n     *  2. Converts farm tokens into want tokens\n     *  3. Deposits want tokens\n     */\n    function earn(uint256 _amountOutAmt, uint256 _deadline) public whenNotPaused {\n        require(isAutoComp, \"GymVaultsStrategyAlpaca: !isAutoComp\");\n        require(!notPublic || isAuthorised(msg.sender), \"GymVaultsStrategyAlpaca: !authorised\");\n\n        // Harvest farm tokens\n        IFairLaunch(farmContractAddress).harvest(pid);\n        // Check if there is any unlocked amount\n        if (checkForUnlockReward) {\n            if (IAlpacaToken(earnedAddress).canUnlockAmount(address(this)) > 0) {\n                IAlpacaToken(earnedAddress).unlock();\n            }\n        }\n\n        // Converts farm tokens into want tokens\n        uint256 earnedAmt = IERC20(earnedAddress).balanceOf(address(this));\n\n        emit Earned(earnedAddress, earnedAmt);\n\n        uint256 _distributeFee = distributeFees(earnedAmt);\n\n        earnedAmt = earnedAmt - _distributeFee;\n\n        IERC20(earnedAddress).safeIncreaseAllowance(uniRouterAddress, earnedAmt);\n\n        if (earnedAddress != wantAddress) {\n            // Swap half earned to token0\n            IPancakeRouter02(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                earnedAmt,\n                _amountOutAmt,\n                earnedToWantPath,\n                address(this),\n                _deadline\n            );\n        }\n\n        // Get want tokens, ie. add liquidity\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\n        if (wantAmt > 0) {\n            emit Compound(wantAddress, wantAmt, address(0), 0);\n        }\n\n        lastEarnBlock = block.number;\n\n        _farm();\n    }\n\n    /**\n     * @notice  Converts dust tokens into earned tokens, which will be reinvested on the next earn().\n     */\n    function convertDustToEarned(uint256 _amountOutAmt, uint256 _deadline) public whenNotPaused {\n        require(isAutoComp, \"GymVaultsStrategyAlpaca: !isAutoComp\");\n\n        // Converts token0 dust (if any) to earned tokens\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\n        if (wantAddress != earnedAddress && wantAmt > 0) {\n            IERC20(wantAddress).safeIncreaseAllowance(uniRouterAddress, wantAmt);\n\n            // Swap all dust tokens to earned tokens\n            IPancakeRouter02(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                wantAmt,\n                _amountOutAmt,\n                wantToEarnedPath,\n                address(this),\n                _deadline\n            );\n            emit ConvertDustToEarned(wantAddress, earnedAddress, wantAmt);\n        }\n    }\n\n    function uniExchangeRate(uint256 _tokenAmount, address[] memory _path) public view returns (uint256) {\n        uint256[] memory amounts = IPancakeRouter02(uniRouterAddress).getAmountsOut(_tokenAmount, _path);\n        return amounts[amounts.length - 1];\n    }\n\n    function pendingHarvest() public view returns (uint256) {\n        uint256 _earnedBal = IERC20(earnedAddress).balanceOf(address(this));\n        return IFairLaunch(farmContractAddress).pendingAlpaca(pid, address(this)) + _earnedBal;\n    }\n\n    function pendingHarvestDollarValue() public view returns (uint256) {\n        uint256 _pending = pendingHarvest();\n        return (_pending == 0) ? 0 : uniExchangeRate(_pending, earnedToBusdPath);\n    }\n\n    function balanceInPool() public view returns (uint256) {\n        (uint256 amount, , , ) = IFarm(farmContractAddress).userInfo(pid, address(this));\n        return amount;\n    }\n\n    /**\n     * @notice  Adds assets in vault\n     */\n    function _farm() internal {\n        // add to vault to get ibToken\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\n        wantLockedTotal = wantLockedTotal + wantAmt;\n        IERC20(wantAddress).safeIncreaseAllowance(vaultContractAddress, wantAmt);\n        IVault(vaultContractAddress).deposit(wantAmt);\n        // add ibToken to farm contract\n        uint256 ibWantAmt = IERC20(vaultContractAddress).balanceOf(address(this));\n        IERC20(vaultContractAddress).safeIncreaseAllowance(farmContractAddress, ibWantAmt);\n        IFairLaunch(farmContractAddress).deposit(address(this), pid, ibWantAmt);\n        emit Farm(wantAmt);\n    }\n\n    /**\n     * @notice  Function to distribute Fees\n     * @param _earnedAmt Amount of earned tokens that will be sent to operator ass fee\n     */\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256 _fee) {\n        if (_earnedAmt > 0) {\n            // Performance fee\n            if (controllerFee > 0) {\n                _fee = (_earnedAmt * controllerFee) / controllerFeeMax;\n                IERC20(earnedAddress).safeTransfer(operator, _fee);\n                emit DistributeFee(earnedAddress, _fee, operator);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "cache/solpp-generated-contracts/interfaces/IAlpacaToken.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\n\ninterface IAlpacaToken {\n    function canUnlockAmount(address _account) external view returns (uint256);\n\n    function unlock() external;\n}\n"
    },
    "cache/solpp-generated-contracts/interfaces/IVaultConfig.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\ninterface IVaultConfig {\n    /// @dev Return minimum BaseToken debt size per position.\n    function minDebtSize() external view returns (uint256);\n\n    /// @dev Return the interest rate per second, using 1e18 as denom.\n    function getInterestRate(uint256 debt, uint256 floating) external view returns (uint256);\n\n    /// @dev Return the address of wrapped native token.\n    function getWrappedNativeAddr() external view returns (address);\n\n    /// @dev Return the address of wNative relayer.\n    function getWNativeRelayer() external view returns (address);\n\n    /// @dev Return the address of fair launch contract.\n    function getFairLaunchAddr() external view returns (address);\n\n    /// @dev Return the bps rate for reserve pool.\n    function getReservePoolBps() external view returns (uint256);\n\n    /// @dev Return the bps rate for Avada Kill caster.\n    function getKillBps() external view returns (uint256);\n\n    /// @dev Return if the caller is whitelisted.\n    function whitelistedCallers(address caller) external returns (bool);\n\n    /// @dev Return whether the given address is a worker.\n    function isWorker(address worker) external view returns (bool);\n\n    /// @dev Return whether the given worker accepts more debt. Revert on non-worker.\n    function acceptDebt(address worker) external view returns (bool);\n\n    /// @dev Return the work factor for the worker + BaseToken debt, using 1e4 as denom. Revert on non-worker.\n    function workFactor(address worker, uint256 debt) external view returns (uint256);\n\n    /// @dev Return the kill factor for the worker + BaseToken debt, using 1e4 as denom. Revert on non-worker.\n    function killFactor(address worker, uint256 debt) external view returns (uint256);\n\n    /// @dev Return the portion of reward that will be transferred to treasury account\n    /// after successfully killing a position.\n    function getKillTreasuryBps() external view returns (uint256);\n\n    /// @dev Return the address of treasury account\n    function getTreasuryAddr() external view returns (address);\n}\n"
    },
    "cache/solpp-generated-contracts/interfaces/IVault.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\ninterface IVault {\n    /// @dev Return the total ERC20 entitled to the token holders. Be careful of unaccrued interests.\n    function totalToken() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    /// @dev Add more ERC20 to the bank. Hope to get some good returns.\n    function deposit(uint256 amountToken) external payable;\n\n    /// @dev Withdraw ERC20 from the bank by burning the share tokens.\n    function withdraw(uint256 share) external;\n\n    /// @dev Request funds from user through Vault\n    function requestFunds(address targetedToken, uint256 amount) external;\n\n    function token() external view returns (address);\n}\n"
    },
    "cache/solpp-generated-contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n\n    event Deposit(address indexed dst, uint256 wad);\n    event Withdrawal(address indexed src, uint256 wad);\n}\n"
    },
    "cache/solpp-generated-contracts/GymVaultsBank.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IStrategy.sol\";\nimport \"./interfaces/IERC20Burnable.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./interfaces/IBuyBack.sol\";\nimport \"./interfaces/IFairLaunch.sol\";\nimport \"./interfaces/IVault.sol\";\nimport \"./interfaces/IFarming.sol\";\nimport \"./interfaces/IGymMLM.sol\";\nimport \"hardhat/console.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\n/**\n * @notice GymVaultsBank contract:\n * - Users can:\n *   # Deposit token\n *   # Deposit BNB\n *   # Withdraw assets\n */\n\ncontract GymVaultsBank is ReentrancyGuardUpgradeable, OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice Info of each user\n     * @param shares: How many LP tokens the user has provided\n     * @param rewardDebt: Reward debt. See explanation below\n     * @dev Any point in time, the amount of UTACOs entitled to a user but is pending to be distributed is:\n     *   amount = user.shares / sharesTotal * wantLockedTotal\n     *   pending reward = (amount * pool.accRewardPerShare) - user.rewardDebt\n     *   Whenever a user deposits or withdraws want tokens to a pool. Here's what happens:\n     *   1. The pool's `accRewardPerShare` (and `lastStakeTime`) gets updated.\n     *   2. User receives the pending reward sent to his/her address.\n     *   3. User's `amount` gets updated.\n     *   4. User's `rewardDebt` gets updated.\n     */\n    struct UserInfo {\n        uint256 shares;\n        uint256 rewardDebt;\n    }\n    /**\n     * @notice Info of each pool\n     * @param want: Address of want token contract\n     * @param allocPoint: How many allocation points assigned to this pool. GYM to distribute per block\n     * @param lastRewardBlock: Last block number that reward distribution occurs\n     * @param accUTacoPerShare: Accumulated rewardPool per share, times 1e18\n     * @param strategy: Address of strategy contract\n     */\n    struct PoolInfo {\n        IERC20 want;\n        uint256 allocPoint;\n        uint256 lastRewardBlock;\n        uint256 accRewardPerShare;\n        address strategy;\n    }\n\n    /**\n     * @notice Info of each rewartPool\n     * @param rewardToken: Address of reward token contract\n     * @param rewardPerBlock: How many reward tokens will user get per block\n     * @param totalPaidRewards: Total amount of reward tokens was paid\n     */\n\n    struct RewardPoolInfo {\n        address rewardToken;\n        uint256 rewardPerBlock;\n    }\n\n    /// Percent of amount that will be sent to relationship contract\n    uint256 public constant RELATIONSHIP_REWARD = 45;\n    /// Percent of amount that will be sent to vault contract\n    uint256 public constant VAULTS_SAVING = 45;\n    /// Percent of amount that will be sent to buyBack contract\n    uint256 public constant BUY_AND_BURN_GYM = 10;\n\n    /// Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint;\n    /// Startblock number\n    uint256 public startBlock;\n    uint256 public withdrawFee;\n    // contracts[8] - Buyback address\n    address public constant buyBack = 0xC55cA98EAE344a610271B846524DCe54487FfBe9;\n    address public farming;\n    // contracts[7] - RelationShip address\n    address public constant relationship = 0xF07eB2741CFF5e6387f6c94857cc56F86E42280B;\n    /// Treasury address where will be sent all unused assets\n    address public treasuryAddress;\n    /// Info of each pool.\n    PoolInfo[] public poolInfo;\n    /// Info of each user that stakes want tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    /// Info of reward pool\n    RewardPoolInfo public rewardPoolInfo;\n\n    address[] private alpacaToWBNB;\n    uint256 private lastChangeBlock;\n    uint256 private rewardPerBlockChangesCount;\n\n    /* ========== EVENTS ========== */\n\n    event Initialized(address indexed executor, uint256 at);\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event RewardPaid(address indexed token, address indexed user, uint256 amount);\n\n    function initialize(\n        uint256 _startBlock,\n        address _gym,\n        uint256 _gymRewardRate\n    ) public initializer {\n        __Ownable_init();\n        require(block.number < _startBlock, \"GymVaultsBank: Start block must have a bigger value\");\n\n        startBlock = _startBlock;\n        rewardPoolInfo = RewardPoolInfo({rewardToken: _gym, rewardPerBlock: _gymRewardRate});\n        alpacaToWBNB = [0x354b3a11D5Ea2DA89405173977E271F58bE2897D, 0xDfb1211E2694193df5765d54350e1145FD2404A1];\n        lastChangeBlock = _startBlock;\n        rewardPerBlockChangesCount = 3;\n        transferOwnership(0x5f2cFa351B7d4b973d341fdB2cB154794c0a899c);\n        emit Initialized(msg.sender, block.number);\n    }\n\n    modifier onlyOnGymMLM() {\n        require(IGymMLM(relationship).isOnGymMLM(msg.sender), \"GymVaultsBank: Don't have relationship\");\n        _;\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n\n    /**\n     * @notice Update the given pool's reward allocation point. Can only be called by the owner\n     * @param _pid: Pool id that will be updated\n     * @param _allocPoint: New allocPoint for pool\n     */\n    function set(uint256 _pid, uint256 _allocPoint) external onlyOwner {\n        massUpdatePools();\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    /**\n     * @notice Update the given pool's strategy. Can only be called by the owner\n     * @param _pid: Pool id that will be updated\n     * @param _strategy: New strategy contract address for pool\n     */\n    function resetStrategy(uint256 _pid, address _strategy) external onlyOwner {\n        PoolInfo storage pool = poolInfo[_pid];\n        require(\n            pool.want.balanceOf(poolInfo[_pid].strategy) == 0 || pool.accRewardPerShare == 0,\n            \"GymVaultsBank: Strategy not empty\"\n        );\n        poolInfo[_pid].strategy = _strategy;\n    }\n\n    /**\n     * @notice Migrates all assets to new strategy. Can only be called by the owner\n     * @param _pid: Pool id that will be updated\n     * @param _newStrategy: New strategy contract address for pool\n     */\n    function migrateStrategy(uint256 _pid, address _newStrategy) external onlyOwner {\n        require(\n            IStrategy(_newStrategy).wantLockedTotal() == 0 && IStrategy(_newStrategy).sharesTotal() == 0,\n            \"GymVaultsBank: New strategy not empty\"\n        );\n        PoolInfo storage pool = poolInfo[_pid];\n        address _oldStrategy = pool.strategy;\n        uint256 _oldSharesTotal = IStrategy(_oldStrategy).sharesTotal();\n        uint256 _oldWantAmt = IStrategy(_oldStrategy).wantLockedTotal();\n        IStrategy(_oldStrategy).withdraw(address(this), _oldWantAmt);\n        pool.want.transfer(_newStrategy, _oldWantAmt);\n        IStrategy(_newStrategy).migrateFrom(_oldStrategy, _oldWantAmt, _oldSharesTotal);\n        pool.strategy = _newStrategy;\n    }\n\n    /**\n     * @notice Updates amount of reward tokens  per block that user will get. Can only be called by the owner\n     */\n    function updateRewardPerBlock() external nonReentrant onlyOwner {\n        massUpdatePools();\n        if (block.number - lastChangeBlock > 20 && rewardPerBlockChangesCount > 0) {\n            rewardPoolInfo.rewardPerBlock = (rewardPoolInfo.rewardPerBlock * 972222222200) / 1e12;\n            rewardPerBlockChangesCount -= 1;\n            lastChangeBlock = block.number;\n        }\n    }\n\n    /**\n     * @notice View function to see pending reward on frontend.\n     * @param _pid: Pool id where user has assets\n     * @param _user: Users address\n     */\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 _accRewardPerShare = pool.accRewardPerShare;\n        uint256 sharesTotal = IStrategy(pool.strategy).sharesTotal();\n        if (block.number > pool.lastRewardBlock && sharesTotal != 0) {\n            uint256 _multiplier = block.number - pool.lastRewardBlock;\n            uint256 _reward = (_multiplier * rewardPoolInfo.rewardPerBlock * pool.allocPoint) / totalAllocPoint;\n            _accRewardPerShare = _accRewardPerShare + ((_reward * 1e18) / sharesTotal);\n        }\n        return (user.shares * _accRewardPerShare) / 1e18 - user.rewardDebt;\n    }\n\n    /**\n     * @notice View function to see staked Want tokens on frontend.\n     * @param _pid: Pool id where user has assets\n     * @param _user: Users address\n     */\n    function stakedWantTokens(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n\n        uint256 sharesTotal = IStrategy(pool.strategy).sharesTotal();\n        uint256 wantLockedTotal = IStrategy(poolInfo[_pid].strategy).wantLockedTotal();\n        if (sharesTotal == 0) {\n            return 0;\n        }\n        return (user.shares * wantLockedTotal) / sharesTotal;\n    }\n\n    /**\n     * @notice Deposit in given pool\n     * @param _pid: Pool id\n     * @param _wantAmt: Amount of want token that user wants to deposit\n     * @param _referrerId: Referrer address\n     */\n    function deposit(\n        uint256 _pid,\n        uint256 _wantAmt,\n        uint256 _referrerId,\n        uint256 _minBurnAmt,\n        uint256 _deadline\n    ) external payable {\n        IGymMLM(relationship).addGymMLM(msg.sender, _referrerId);\n        PoolInfo storage pool = poolInfo[_pid];\n        if (address(pool.want) == 0xDfb1211E2694193df5765d54350e1145FD2404A1) {\n            // If `want` is WBNB\n            IWETH(0xDfb1211E2694193df5765d54350e1145FD2404A1).deposit{value: msg.value}();\n            _wantAmt = msg.value;\n        }\n        _deposit(_pid, _wantAmt, _minBurnAmt, _deadline);\n    }\n\n    /**\n     * @notice Withdraw user`s assets from pool\n     * @param _pid: Pool id\n     * @param _wantAmt: Amount of want token that user wants to withdraw\n     */\n    function withdraw(uint256 _pid, uint256 _wantAmt) external nonReentrant {\n        _withdraw(_pid, _wantAmt);\n    }\n\n    /**\n     * @notice Claim users rewards and add deposit in Farming contract\n     * @param _pid: pool Id\n     */\n    function claimAndDeposit(\n        uint256 _pid,\n        uint256 _amountTokenMin,\n        uint256 _amountETHMin,\n        uint256 _minAmountOut,\n        uint256 _deadline\n    ) external payable {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        uint256 pending = (user.shares * pool.accRewardPerShare) / (1e18) - (user.rewardDebt);\n        if (pending > 0) {\n            IERC20(rewardPoolInfo.rewardToken).approve(farming, pending);\n            IFarming(farming).autoDeposit{value: msg.value}(\n                0,\n                pending,\n                _amountTokenMin,\n                _amountETHMin,\n                _minAmountOut,\n                msg.sender,\n                _deadline\n            );\n        }\n        user.rewardDebt = (user.shares * (pool.accRewardPerShare)) / (1e18);\n    }\n\n    /**\n     * @notice Claim users rewards from all pools\n     */\n    function claimAll() external {\n        uint256 length = poolLength();\n        for (uint256 i = 0; i <= length - 1; i++) {\n            claim(i);\n        }\n    }\n\n    /**\n     * @notice  Function to set Treasury address\n     * @param _treasuryAddress Address of treasury address\n     */\n    function setTreasuryAddress(address _treasuryAddress) external nonReentrant onlyOwner {\n        treasuryAddress = _treasuryAddress;\n    }\n\n    /**\n     * @notice  Function to set Farming address\n     * @param _farmingAddress Address of treasury address\n     */\n    function setFarmingAddress(address _farmingAddress) external nonReentrant onlyOwner {\n        farming = _farmingAddress;\n    }\n\n    /**\n     * @notice  Function to set withdraw fee\n     * @param _fee 100 = 1%\n     */\n    function setWithdrawFee(uint256 _fee) external nonReentrant onlyOwner {\n        withdrawFee = _fee;\n    }\n\n    function poolLength() public view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    /**\n     * @notice Claim users rewards from given pool\n     * @param _pid pool Id\n     */\n    function claim(uint256 _pid) public {\n        updatePool(_pid);\n        _claim(_pid);\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        user.rewardDebt = (user.shares * (pool.accRewardPerShare)) / (1e18);\n    }\n\n    /**\n     * @notice Function to Add pool\n     * @param _want: Address of want token contract\n     * @param _allocPoint: AllocPoint for new pool\n     * @param _withUpdate: If true will call massUpdatePools function\n     * @param _strategy: Address of Strategy contract\n     */\n    function add(\n        IERC20 _want,\n        uint256 _allocPoint,\n        bool _withUpdate,\n        address _strategy\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint + _allocPoint;\n        poolInfo.push(\n            PoolInfo({\n                want: _want,\n                allocPoint: _allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                accRewardPerShare: 0,\n                strategy: _strategy\n            })\n        );\n    }\n\n    /**\n     * @notice Update reward variables for all pools. Be careful of gas spending!\n     */\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    /**\n     * @notice Update reward variables of the given pool to be up-to-date.\n     * @param _pid: Pool id that will be updated\n     */\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 sharesTotal = IStrategy(pool.strategy).sharesTotal();\n        if (sharesTotal == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = block.number - pool.lastRewardBlock;\n        if (multiplier <= 0) {\n            return;\n        }\n        uint256 _rewardPerBlock = rewardPoolInfo.rewardPerBlock;\n        uint256 _reward = (multiplier * _rewardPerBlock * pool.allocPoint) / totalAllocPoint;\n        pool.accRewardPerShare = pool.accRewardPerShare + ((_reward * 1e18) / sharesTotal);\n        pool.lastRewardBlock = block.number;\n    }\n\n    /**\n     * @notice  Safe transfer function for reward tokens\n     * @param _rewardToken Address of reward token contract\n     * @param _to Address of reciever\n     * @param _amount Amount of reward tokens to transfer\n     */\n    function safeRewardTransfer(\n        address _rewardToken,\n        address _to,\n        uint256 _amount\n    ) internal {\n        uint256 _bal = IERC20(_rewardToken).balanceOf(address(this));\n        if (_amount > _bal) {\n            IERC20(_rewardToken).transfer(_to, _bal);\n        } else {\n            IERC20(_rewardToken).transfer(_to, _amount);\n        }\n    }\n\n    /**\n     * @notice Calculates amount of reward user will get.\n     * @param _pid: Pool id\n     */\n    function _claim(uint256 _pid) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 pending = (user.shares * pool.accRewardPerShare) / (1e18) - (user.rewardDebt);\n        if (pending > 0) {\n            address rewardToken = rewardPoolInfo.rewardToken;\n            safeRewardTransfer(rewardToken, msg.sender, pending);\n            emit RewardPaid(rewardToken, msg.sender, pending);\n        }\n    }\n\n    /**\n     * @notice Private deposit function\n     * @param _pid: Pool id\n     * @param _wantAmt: Amount of want token that user wants to deposit\n     */\n    function _deposit(\n        uint256 _pid,\n        uint256 _wantAmt,\n        uint256 _minBurnAmt,\n        uint256 _deadline\n    ) private {\n        updatePool(_pid);\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        if (user.shares > 0) {\n            _claim(_pid);\n        }\n\n        if (_wantAmt > 0) {\n            if (address(pool.want) != 0xDfb1211E2694193df5765d54350e1145FD2404A1) {\n                // If `want` not WBNB\n                pool.want.safeTransferFrom(address(msg.sender), address(this), _wantAmt);\n            }\n\n            pool.want.safeTransfer(relationship, (_wantAmt * RELATIONSHIP_REWARD) / 100);\n\n            // Distribute MLM rewards\n            IGymMLM(relationship).distributeRewards(_wantAmt, address(pool.want), msg.sender);\n\n            pool.want.safeTransfer(buyBack, (_wantAmt * BUY_AND_BURN_GYM) / 100);\n\n            IBuyBack(buyBack).buyAndBurnToken(\n                address(pool.want),\n                (_wantAmt * BUY_AND_BURN_GYM) / 100,\n                rewardPoolInfo.rewardToken,\n                _minBurnAmt,\n                _deadline\n            );\n\n            _wantAmt = (_wantAmt * VAULTS_SAVING) / 100;\n            pool.want.safeIncreaseAllowance(pool.strategy, _wantAmt);\n            uint256 sharesAdded = IStrategy(poolInfo[_pid].strategy).deposit(msg.sender, _wantAmt);\n\n            user.shares = user.shares + sharesAdded;\n        }\n        user.rewardDebt = (user.shares * (pool.accRewardPerShare)) / (1e18);\n\n        // Send unsent rewards to the treasury address\n        _transfer(address(pool.want), treasuryAddress, pool.want.balanceOf(address(this)));\n\n        emit Deposit(msg.sender, _pid, _wantAmt);\n    }\n\n    /**\n     * @notice Private withdraw function\n     * @param _pid: Pool id\n     * @param _wantAmt: Amount of want token that user wants to withdraw\n     */\n    function _withdraw(uint256 _pid, uint256 _wantAmt) private {\n        updatePool(_pid);\n\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        uint256 wantLockedTotal = IStrategy(poolInfo[_pid].strategy).wantLockedTotal();\n        uint256 sharesTotal = IStrategy(poolInfo[_pid].strategy).sharesTotal();\n\n        require(user.shares > 0, \"GymVaultsBank: user.shares is 0\");\n        require(sharesTotal > 0, \"GymVaultsBank: sharesTotal is 0\");\n\n        _claim(_pid);\n\n        // Withdraw want tokens\n        uint256 amount = (user.shares * (wantLockedTotal)) / (sharesTotal);\n        if (_wantAmt > amount) {\n            _wantAmt = amount;\n        }\n        if (_wantAmt > 0) {\n            uint256 sharesRemoved = IStrategy(poolInfo[_pid].strategy).withdraw(msg.sender, _wantAmt);\n            user.shares -= sharesRemoved;\n\n            uint256 wantBal = IERC20(pool.want).balanceOf(address(this));\n            if (wantBal < _wantAmt) {\n                _wantAmt = wantBal;\n            }\n\n            if (_wantAmt > 0) {\n                _transfer(address(pool.want), treasuryAddress, (_wantAmt * withdrawFee) / 10000);\n                _transfer(address(pool.want), msg.sender, pool.want.balanceOf(address(this)));\n            }\n        }\n        user.rewardDebt = (user.shares * (pool.accRewardPerShare)) / (1e18);\n\n        emit Withdraw(msg.sender, _pid, _wantAmt);\n    }\n\n    function _transfer(\n        address _token,\n        address _receiver,\n        uint256 _amount\n    ) private {\n        if (_token == 0xDfb1211E2694193df5765d54350e1145FD2404A1) {\n            // If _token is WBNB\n            IWETH(_token).withdraw(_amount);\n            payable(_receiver).transfer(_amount);\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n}\n"
    },
    "cache/solpp-generated-contracts/interfaces/IStrategy.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\n\ninterface IStrategy {\n    // Total want tokens managed by strategy\n    function wantLockedTotal() external view returns (uint256);\n\n    // Sum of all shares of users to wantLockedTotal\n    function sharesTotal() external view returns (uint256);\n\n    function wantAddress() external view returns (address);\n\n    function token0Address() external view returns (address);\n\n    function token1Address() external view returns (address);\n\n    function earnedAddress() external view returns (address);\n\n    function ratio0() external view returns (uint256);\n\n    function ratio1() external view returns (uint256);\n\n    function getPricePerFullShare() external view returns (uint256);\n\n    // Main want token compounding function\n    function earn(uint256 _amountOutAmt, uint256 _deadline) external;\n\n    // Transfer want tokens autoFarm -> strategy\n    function deposit(address _userAddress, uint256 _wantAmt) external returns (uint256);\n\n    // Transfer want tokens strategy -> autoFarm\n    function withdraw(address _userAddress, uint256 _wantAmt) external returns (uint256);\n\n    function migrateFrom(\n        address _oldStrategy,\n        uint256 _oldWantLockedTotal,\n        uint256 _oldSharesTotal\n    ) external;\n\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) external;\n}\n"
    },
    "cache/solpp-generated-contracts/interfaces/IBuyBack.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\ninterface IBuyBack {\n    function buyAndBurnToken(\n        address,\n        uint256,\n        address,\n        uint256,\n        uint256\n    ) external returns (uint256);\n}\n"
    },
    "cache/solpp-generated-contracts/interfaces/IFairLaunch.sol": {
      "content": "pragma solidity 0.8.7;\npragma experimental ABIEncoderV2;\n\n// SPDX-License-Identifier: MIT\n\n\n\ninterface IFairLaunchV1 {\n    // Data structure\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n        uint256 bonusDebt;\n        address fundedBy;\n    }\n    struct PoolInfo {\n        address stakeToken;\n        uint256 allocPoint;\n        uint256 lastRewardBlock;\n        uint256 accAlpacaPerShare;\n        uint256 accAlpacaPerShareTilBonusEnd;\n    }\n\n    // Information query functions\n    function userInfo(uint256 pid, address user) external view returns (IFairLaunchV1.UserInfo memory);\n\n    // User's interaction functions\n    function pendingAlpaca(uint256 _pid, address _user) external view returns (uint256);\n}\n"
    },
    "cache/solpp-generated-contracts/interfaces/IFarming.sol": {
      "content": "pragma solidity 0.8.7;\n\n\n\n// SPDX-License-Identifier: MIT\n\ninterface IFarming {\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n    }\n    struct PoolInfo {\n        address lpToken;\n        uint256 allocPoint;\n        uint256 lastRewardBlock;\n        uint256 accRewardPerShare;\n    }\n\n    function autoDeposit(\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        address,\n        uint256\n    ) external payable;\n}\n"
    },
    "cache/solpp-generated-contracts/interfaces/IGymMLM.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\n\ninterface IGymMLM {\n    function isOnGymMLM(address) external view returns (bool);\n\n    function addGymMLM(address, uint256) external;\n\n    function distributeRewards(\n        uint256,\n        address,\n        address\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "cache/solpp-generated-contracts/mocks/FairLaunchMock.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"hardhat/console.sol\";\n\n// FairLaunch is a smart contract for distributing ALPACA by asking user to stake the ERC20-based token.\ncontract FairLaunchMock {\n    using SafeERC20 for IERC20;\n\n    function deposit(\n        address,\n        uint256,\n        uint256 _amount\n    ) external {\n        IERC20(0xB0D4afd8879eD9F52b28595d31B441D079B2Ca07).safeTransferFrom(msg.sender, address(this), _amount);\n    }\n\n    // Withdraw Staking tokens from FairLaunchToken.\n    function withdraw(\n        address _for,\n        uint256 _pid,\n        uint256 _amount\n    ) external {\n        _withdraw(_for, _pid, _amount);\n    }\n\n    function _withdraw(\n        address,\n        uint256,\n        uint256 _amount\n    ) internal {\n        IERC20(0xB0D4afd8879eD9F52b28595d31B441D079B2Ca07).safeTransfer(address(msg.sender), _amount);\n    }\n\n    // Harvest ALPACAs earn from the pool.\n    function harvest(uint256) external {\n        IERC20(0x82e01223d51Eb87e16A03E24687EDF0F294da6f1).safeTransfer(address(msg.sender), 500);\n    }\n}\n"
    },
    "cache/solpp-generated-contracts/GymFarming.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/ILiquidityProvider.sol\";\nimport \"./interfaces/IPancakeRouter02.sol\";\nimport \"hardhat/console.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract GymFarming is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    /**\n     * @notice Info of each user\n     * @param amount: How many LP tokens the user has provided\n     * @param rewardDebt: Reward debt. See explanation below\n     */\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n    }\n    /**\n     * @notice Info of each pool\n     * @param lpToken: Address of LP token contract\n     * @param allocPoint: How many allocation points assigned to this pool. rewards to distribute per block\n     * @param lastRewardBlock: Last block number that rewards distribution occurs\n     * @param accRewardPerShare: Accumulated rewards per share, times 1e18. See below\n     */\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. rewards to distribute per block.\n        uint256 lastRewardBlock; // Last block number that rewards distribution occurs.\n        uint256 accRewardPerShare; // Accumulated rewards per share, times 1e18. See below.\n    }\n    /// The reward token\n    IERC20 public rewardToken;\n    uint256 public rewardPerBlock;\n    /// Info of each pool.\n    PoolInfo[] public poolInfo;\n    /// Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    mapping(address => bool) public isPoolExist;\n    /// Total allocation poitns. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint;\n    /// The block number when reward mining starts.\n    uint256 public startBlock;\n    /// The Liquidity Provider\n    ILiquidityProvider public liquidityProvider = ILiquidityProvider(0xED2056Cff3e8408c0934D203a26c082E7ced7a97);\n    uint256 public liquidityProviderApiId = 2;\n    address public bankAddress;\n    address public constant ROUTER_ADDRESS = 0x367633909278A3C91f4cB130D8e56382F00D1071;\n    address public constant wbnbAddress = address(0xDfb1211E2694193df5765d54350e1145FD2404A1);\n    address[] public rewardTokenToWBNB;\n    uint256 private rewardPerBlockChangesCount;\n    uint256 private lastChangeBlock;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event Provider(address oldProvider, uint256 oldApi, address newProvider, uint256 newApi);\n\n    constructor(\n        address _bankAddress,\n        address _rewardToken,\n        uint256 _rewardPerBlock,\n        uint256 _startBlock\n    ) {\n        require(address(_rewardToken) != address(0x0), \"GymFarming::SET_ZERO_ADDRESS\");\n        bankAddress = _bankAddress;\n        rewardToken = IERC20(_rewardToken);\n        rewardPerBlock = _rewardPerBlock;\n        startBlock = _startBlock;\n        rewardPerBlockChangesCount = 3;\n        lastChangeBlock = _startBlock;\n        rewardTokenToWBNB = [_rewardToken, wbnbAddress];\n\n        transferOwnership(0x5f2cFa351B7d4b973d341fdB2cB154794c0a899c);\n    }\n\n\n    modifier poolExists(uint256 _pid) {\n        require(_pid < poolInfo.length, \"GymFarming::UNKNOWN_POOL\");\n        _;\n    }\n\n    modifier onlyBank() {\n        require(msg.sender == bankAddress, \"GymFarming:: Only bank\");\n        _;\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n\n    /// @return All pools amount\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    /**\n     * @notice View function to see total pending rewards on frontend\n     * @param _user: user address for which reward must be calculated\n     * @return total Return reward for user\n     */\n    function pendingRewardTotal(address _user) external view returns (uint256 total) {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            total += pendingReward(pid, _user);\n        }\n    }\n\n    /**\n     * @notice Function to set reward token\n     * @param _rewardToken: address of reward token\n     */\n    function setRewardToken(IERC20 _rewardToken) external onlyOwner {\n        rewardToken = _rewardToken;\n    }\n\n    /**\n     * @notice Function to set amount of reward per block\n     */\n    function setRewardPerBlock() external onlyOwner {\n        massUpdatePools();\n        if (block.number - lastChangeBlock > 20 && rewardPerBlockChangesCount > 0) {\n            rewardPerBlock = (rewardPerBlock * 972222222200) / 1e12;\n            rewardPerBlockChangesCount -= 1;\n            lastChangeBlock = block.number;\n        }\n    }\n\n    /**\n     * @param _from: block block from which the reward is calculated\n     * @param _to: block block before which the reward is calculated\n     * @return Return reward multiplier over the given _from to _to block\n     */\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        return (rewardPerBlock * (_to - _from));\n    }\n\n    /**\n     * @notice View function to see pending rewards on frontend\n     * @param _pid: pool ID for which reward must be calculated\n     * @param _user: user address for which reward must be calculated\n     * @return Return reward for user\n     */\n    function pendingReward(uint256 _pid, address _user) public view poolExists(_pid) returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accRewardPerShare = pool.accRewardPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 reward = (multiplier * pool.allocPoint) / totalAllocPoint;\n            accRewardPerShare = accRewardPerShare + ((reward * 1e18) / lpSupply);\n        }\n        return (user.amount * accRewardPerShare) / 1e18 - user.rewardDebt;\n    }\n\n    /**\n     * @notice Add a new lp to the pool. Can only be called by the owner\n     * @param _allocPoint: allocPoint for new pool\n     * @param _lpToken: address of lpToken for new pool\n     * @param _withUpdate: if true, update all pools\n     */\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        bool _withUpdate\n    ) public onlyOwner {\n        require(!isPoolExist[address(_lpToken)], \"GymFarming::DUPLICATE_POOL\");\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint += _allocPoint;\n        poolInfo.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                allocPoint: _allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                accRewardPerShare: 0\n            })\n        );\n        isPoolExist[address(_lpToken)] = true;\n    }\n\n    /**\n     * @notice Update the given pool's reward allocation point. Can only be called by the owner\n     */\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) public onlyOwner poolExists(_pid) {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    /**\n     * @notice Function which take ETH and tokens, add liquidity with provider and deposit given LP's\n     * @param _pid: pool ID where we want deposit\n     * @param _tokenAmount: amount of tokens for staking\n     * @param _amountAMin: bounds the extent to which the B/A price can go up before the transaction reverts.\n        Must be <= amountADesired.\n     * @param _amountBMin: bounds the extent to which the A/B price can go up before the transaction reverts.\n        Must be <= amountBDesired\n     * @param _minAmountOutA: the minimum amount of output A tokens that must be received\n        for the transaction not to revert\n     */\n    function speedStake(\n        uint256 _pid,\n        uint256 _tokenAmount,\n        uint256 _amountAMin,\n        uint256 _amountBMin,\n        uint256 _minAmountOutA,\n        uint256 _deadline\n    ) public payable poolExists(_pid) {\n        IPancakeRouter02 router = IPancakeRouter02(ROUTER_ADDRESS);\n\n        updatePool(_pid);\n        IPancakeswapPair lpToken = IPancakeswapPair(address(poolInfo[_pid].lpToken));\n\n        require((lpToken.token0() == router.WETH()) || (lpToken.token1() == router.WETH()), \"Wrong poolID\");\n\n        uint256 bnbAmount = msg.value;\n\n        if (_tokenAmount > 0) {\n            IERC20 token = IERC20(lpToken.token0());\n\n            if (lpToken.token0() == router.WETH()) {\n                token = IERC20(lpToken.token1());\n            }\n\n            address[] memory path = new address[](2);\n\n            path[0] = address(token);\n            path[1] = wbnbAddress;\n\n            token.safeTransferFrom(msg.sender, address(this), _tokenAmount);\n            token.approve(ROUTER_ADDRESS, _tokenAmount);\n\n            uint256[] memory swapResult = router.swapExactTokensForETH(_tokenAmount, 0, path, address(this), _deadline);\n\n            bnbAmount += swapResult[1];\n        }\n\n        uint256 lp = liquidityProvider.addLiquidityETHByPair{value: bnbAmount}(\n            lpToken,\n            address(this),\n            _amountAMin,\n            _amountBMin,\n            _minAmountOutA,\n            _deadline,\n            liquidityProviderApiId\n        );\n\n        _deposit(_pid, lp, msg.sender);\n    }\n\n    /**\n     * @notice Update reward vairables for all pools\n     */\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    /**\n     * @notice Update reward variables of the given pool to be up-to-date\n     * @param _pid: pool ID for which the reward variables should be updated\n     */\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 reward = (multiplier * pool.allocPoint) / totalAllocPoint;\n        pool.accRewardPerShare = pool.accRewardPerShare + ((reward * 1e18) / lpSupply);\n        pool.lastRewardBlock = block.number;\n    }\n\n    /**\n     * @notice Deposit LP tokens to GymFarming for reward allocation\n     * @param _pid: pool ID on which LP tokens should be deposited\n     * @param _amount: the amount of LP tokens that should be deposited\n     */\n    function deposit(uint256 _pid, uint256 _amount) public poolExists(_pid) {\n        updatePool(_pid);\n        poolInfo[_pid].lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n        _deposit(_pid, _amount, msg.sender);\n    }\n\n    function claimAndDeposit(\n        uint256 _pid,\n        uint256 _amountAMin,\n        uint256 _amountBMin,\n        uint256 _minAmountOutA,\n        uint256 _deadline\n    ) external payable poolExists(_pid) {\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        IPancakeRouter02 router = IPancakeRouter02(ROUTER_ADDRESS);\n\n        uint256 bnbAmount = msg.value;\n\n        if (user.amount > 0) {\n            updatePool(_pid);\n\n            uint256 accRewardPerShare = poolInfo[_pid].accRewardPerShare;\n\n            uint256 pending = (user.amount * accRewardPerShare) / 1e18 - user.rewardDebt;\n\n            user.rewardDebt = (user.amount * accRewardPerShare) / 1e18;\n\n            rewardToken.approve(ROUTER_ADDRESS, pending);\n\n            uint256[] memory swapResult = router.swapExactTokensForETH(\n                pending,\n                0,\n                rewardTokenToWBNB,\n                address(this),\n                _deadline\n            );\n\n            bnbAmount += swapResult[1];\n        }\n\n        uint256 lp = liquidityProvider.addLiquidityETHByPair{value: bnbAmount}(\n            IPancakeswapPair(address(poolInfo[_pid].lpToken)),\n            address(this),\n            _amountAMin,\n            _amountBMin,\n            _minAmountOutA,\n            _deadline,\n            liquidityProviderApiId\n        );\n\n        _deposit(_pid, lp, msg.sender);\n    }\n\n    /**\n     * @notice Deposit LP tokens to GymFarming from GymVaultsBank\n     * @param _pid: pool ID on which LP tokens should be deposited\n     * @param _amount: the amount of reward tokens that should be converted to LP tokens and deposits to GymFarming contract\n     * @param _from: Address of user that called function from GymVaultsBank\n     */\n    function autoDeposit(\n        uint256 _pid,\n        uint256 _amount,\n        uint256 _amountTokenMin,\n        uint256 _amountETHMin,\n        uint256 _minAmountOut,\n        address _from,\n        uint256 _deadline\n    ) public payable poolExists(_pid) onlyBank {\n        updatePool(_pid);\n        rewardToken.transferFrom(msg.sender, address(this), _amount);\n        uint256 contractbalance = address(this).balance - msg.value;\n        rewardToken.approve(ROUTER_ADDRESS, _amount);\n        IPancakeRouter02(ROUTER_ADDRESS).swapExactTokensForETHSupportingFeeOnTransferTokens(\n            _amount,\n            _amountETHMin,\n            rewardTokenToWBNB,\n            address(this),\n            _deadline\n        );\n        uint256 balanceDifference = address(this).balance - contractbalance;\n\n        uint256 lp = liquidityProvider.addLiquidityETH{value: balanceDifference}(\n            address(rewardToken),\n            address(this),\n            _amountTokenMin,\n            _amountETHMin,\n            _minAmountOut,\n            _deadline,\n            liquidityProviderApiId\n        );\n\n        _deposit(_pid, lp, _from);\n    }\n\n    /**\n     * @notice Function which send accumulated reward tokens to messege sender\n     * @param _pid: pool ID from which the accumulated reward tokens should be received\n     */\n    function harvest(uint256 _pid) public poolExists(_pid) {\n        _harvest(_pid, msg.sender);\n    }\n\n    /**\n     * @notice Function which send accumulated reward tokens to messege sender from all pools\n     */\n    function harvestAll() public {\n        uint256 length = poolInfo.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (poolInfo[i].allocPoint > 0) {\n                harvest(i);\n            }\n        }\n    }\n\n    /**\n     * @notice Function which withdraw LP tokens to messege sender with the given amount\n     * @param _pid: pool ID from which the LP tokens should be withdrawn\n     * @param _amount: the amount of LP tokens that should be withdrawn\n     */\n    function withdraw(uint256 _pid, uint256 _amount) public poolExists(_pid) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 pending = (user.amount * pool.accRewardPerShare) / 1e18 - user.rewardDebt;\n        safeRewardTransfer(msg.sender, pending);\n        emit Harvest(msg.sender, _pid, pending);\n        user.amount -= _amount;\n        user.rewardDebt = (user.amount * pool.accRewardPerShare) / 1e18;\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    /**\n     * @notice Function which transfer reward tokens to _to with the given amount\n     * @param _to: transfer reciver address\n     * @param _amount: amount of reward token which should be transfer\n     */\n    function safeRewardTransfer(address _to, uint256 _amount) internal {\n        if (_amount > 0) {\n            uint256 rewardTokenBal = rewardToken.balanceOf(address(this));\n            if (_amount > rewardTokenBal) {\n                rewardToken.transfer(_to, rewardTokenBal);\n            } else {\n                rewardToken.transfer(_to, _amount);\n            }\n        }\n    }\n\n    /**\n     * @notice Function for updating user info\n     */\n    function _deposit(\n        uint256 _pid,\n        uint256 _amount,\n        address _from\n    ) private {\n        UserInfo storage user = userInfo[_pid][_from];\n        _harvest(_pid, _from);\n        user.amount += _amount;\n        user.rewardDebt = (user.amount * poolInfo[_pid].accRewardPerShare) / 1e18;\n        emit Deposit(_from, _pid, _amount);\n    }\n\n    /**\n     * @notice Private function which send accumulated reward tokens to givn address\n     * @param _pid: pool ID from which the accumulated reward tokens should be received\n     * @param _from: Recievers address\n     */\n    function _harvest(uint256 _pid, address _from) private poolExists(_pid) {\n        UserInfo storage user = userInfo[_pid][_from];\n        if (user.amount > 0) {\n            updatePool(_pid);\n            uint256 accRewardPerShare = poolInfo[_pid].accRewardPerShare;\n            uint256 pending = (user.amount * accRewardPerShare) / 1e18 - user.rewardDebt;\n            safeRewardTransfer(_from, pending);\n            user.rewardDebt = (user.amount * accRewardPerShare) / 1e18;\n            emit Harvest(_from, _pid, pending);\n        }\n    }\n}\n"
    },
    "cache/solpp-generated-contracts/interfaces/ILiquidityProvider.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\nimport \"./IPancakeswapPair.sol\";\nimport \"./IPancakeRouter02.sol\";\n\ninterface ILiquidityProvider {\n    function apis(uint256)\n        external\n        view\n        returns (\n            address,\n            address,\n            address\n        );\n\n    function addExchange(IPancakeRouter02) external;\n\n    function addLiquidityETH(\n        address,\n        address,\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256\n    ) external payable returns (uint256);\n\n    function addLiquidityETHByPair(\n        IPancakeswapPair,\n        address,\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256\n    ) external payable returns (uint256);\n\n    function addLiquidity(\n        address,\n        address,\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        address,\n        uint256,\n        uint256\n    ) external payable returns (uint256);\n\n    function addLiquidityByPair(\n        IPancakeswapPair,\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        address,\n        uint256,\n        uint256\n    ) external payable returns (uint256);\n\n    function removeLiquidityETH(\n        address,\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        address,\n        uint256,\n        uint256,\n        uint8\n    ) external returns (uint256[3] memory);\n\n    function removeLiquidityETHByPair(\n        IPancakeswapPair,\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        address,\n        uint256,\n        uint256,\n        uint8\n    ) external returns (uint256[3] memory);\n\n    function removeLiquidityETHWithPermit(\n        address,\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        address,\n        uint256,\n        uint256,\n        uint8,\n        uint8,\n        bytes32,\n        bytes32\n    ) external returns (uint256[3] memory);\n\n    function removeLiquidity(\n        address,\n        address,\n        uint256,\n        uint256[2] memory,\n        uint256[2] memory,\n        address,\n        uint256,\n        uint256,\n        uint8\n    ) external returns (uint256[3] memory);\n\n    function removeLiquidityByPair(\n        IPancakeswapPair,\n        uint256,\n        uint256[2] memory,\n        uint256[2] memory,\n        address,\n        uint256,\n        uint256,\n        uint8\n    ) external returns (uint256[3] memory);\n\n    function removeLiquidityWithPermit(\n        address,\n        address,\n        uint256,\n        uint256[2] memory,\n        uint256[2] memory,\n        address,\n        uint256,\n        uint256,\n        uint8,\n        uint8,\n        bytes32,\n        bytes32\n    ) external returns (uint256[3] memory);\n}\n"
    },
    "cache/solpp-generated-contracts/interfaces/IPancakeswapPair.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\n\ninterface IPancakeswapPair {\n    function balanceOf(address owner) external view returns (uint256);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n}\n"
    },
    "cache/solpp-generated-contracts/GymMLM.sol": {
      "content": "pragma solidity 0.8.7;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"hardhat/console.sol\";\n\ncontract GymMLM is Ownable {\n    uint256 public currentId;\n    address public bankAddress;\n    uint8[15] public directReferralBonuses;\n\n    mapping(address => uint256) public addressToId;\n    mapping(uint256 => address) public idToAddress;\n\n    mapping(address => address) public userToReferrer;\n\n    event NewReferral(address indexed user, address indexed referral);\n\n    event ReferralRewardReceved(address indexed user, address indexed referral, uint256 amount);\n\n    constructor() {\n        directReferralBonuses = [10, 7, 5, 4, 4, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1];\n        addressToId[0x5f2cFa351B7d4b973d341fdB2cB154794c0a899c] = 1;\n        idToAddress[1] = 0x5f2cFa351B7d4b973d341fdB2cB154794c0a899c;\n        userToReferrer[0x5f2cFa351B7d4b973d341fdB2cB154794c0a899c] = 0x5f2cFa351B7d4b973d341fdB2cB154794c0a899c;\n        currentId = 2;\n        transferOwnership(0x5f2cFa351B7d4b973d341fdB2cB154794c0a899c); // deployer address\n    }\n\n    modifier onlyBank() {\n        require(msg.sender == bankAddress, \"GymMLM:: Only bank\");\n        _;\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n\n    function _addUser(address _user, address _referrer) private {\n        addressToId[_user] = currentId;\n        idToAddress[currentId] = _user;\n        userToReferrer[_user] = _referrer;\n        currentId++;\n        emit NewReferral(_referrer, _user);\n    }\n\n    /**\n     * @notice  Function to add GymMLM\n     * @param _user Address of user\n     * @param _referrerId Address of referrer\n     */\n    function addGymMLM(address _user, uint256 _referrerId) external onlyBank {\n        address _referrer = userToReferrer[_user];\n\n        if (_referrer == address(0)) {\n            _referrer = idToAddress[_referrerId];\n        }\n\n        require(_user != address(0), \"GymMLM::user is zero address\");\n\n        require(_referrer != address(0), \"GymMLM::referrer is zero address\");\n\n        require(\n            userToReferrer[_user] == address(0) || userToReferrer[_user] == _referrer,\n            \"GymMLM::referrer is zero address\"\n        );\n\n        // If user didn't exsist before\n        if (addressToId[_user] == 0) {\n            _addUser(_user, _referrer);\n        }\n    }\n\n    /**\n     * @notice  Function to distribute rewards to referrers\n     * @param _wantAmt Amount of assets that will be distributed\n     * @param _wantAddr Address of want token contract\n     * @param _user Address of user\n     */\n    function distributeRewards(\n        uint256 _wantAmt,\n        address _wantAddr,\n        address _user\n    ) public onlyBank {\n        uint256 index;\n        uint256 length = directReferralBonuses.length;\n\n        IERC20 token = IERC20(_wantAddr);\n        if (_wantAddr != 0xDfb1211E2694193df5765d54350e1145FD2404A1) {\n            while (index < length && addressToId[userToReferrer[_user]] != 1) {\n                address referrer = userToReferrer[_user];\n                uint256 reward = (_wantAmt * directReferralBonuses[index]) / 100;\n                token.transfer(referrer, reward);\n                emit ReferralRewardReceved(referrer, _user, reward);\n                _user = userToReferrer[_user];\n                index++;\n            }\n\n            if (index != length) {\n                token.transfer(bankAddress, token.balanceOf(address(this)));\n            }\n\n            return;\n        }\n\n        while (index < length && addressToId[userToReferrer[_user]] != 1) {\n            address referrer = userToReferrer[_user];\n            uint256 reward = (_wantAmt * directReferralBonuses[index]) / 100;\n            IWETH(0xDfb1211E2694193df5765d54350e1145FD2404A1).withdraw(reward);\n            payable(referrer).transfer(reward);\n            emit ReferralRewardReceved(referrer, _user, reward);\n            _user = userToReferrer[_user];\n            index++;\n        }\n\n        if (index != length) {\n            token.transfer(bankAddress, token.balanceOf(address(this)));\n        }\n    }\n\n    function setBankAddress(address _bank) external onlyOwner {\n        bankAddress = _bank;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}